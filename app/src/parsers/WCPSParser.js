// Generated from WCPS.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var WCPSListener = require('./WCPSListener').WCPSListener;
var WCPSVisitor = require('./WCPSVisitor').WCPSVisitor;

var grammarFileName = "WCPS.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003c\u02a6\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0003\u0002\u0003\u0002\u0005\u0002",
    "\u008b\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0007\u0003\u0093\n\u0003\f\u0003\u000e\u0003\u0096",
    "\u000b\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u009b\n",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0007\u0004\u00a0\n\u0004",
    "\f\u0004\u000e\u0004\u00a3\u000b\u0004\u0003\u0004\u0005\u0004\u00a6",
    "\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0005\b\u00b2\n",
    "\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u00b9\n\t\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u00c0\n\n\u0003\n\u0003\n\u0005",
    "\n\u00c4\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n",
    "\u0003\n\u0003\n\u0005\n\u00cf\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0007",
    "\n\u00d5\n\n\f\n\u000e\n\u00d8\u000b\n\u0003\u000b\u0003\u000b\u0003",
    "\f\u0003\f\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000f\u0003",
    "\u000f\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u00f6\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0007\u0012\u00fc\n\u0012\f\u0012\u000e\u0012\u00ff\u000b",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0016\u0003",
    "\u0016\u0003\u0017\u0003\u0017\u0005\u0017\u010f\n\u0017\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u0122\n",
    "\u001a\f\u001a\u000e\u001a\u0125\u000b\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0007\u001b\u0130\n\u001b\f\u001b\u000e\u001b\u0133\u000b",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0007\u001c\u0166\n\u001c\f\u001c\u000e\u001c\u0169",
    "\u000b\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0005\u001c\u0171\n\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0007\u001c\u018f\n\u001c\f\u001c\u000e\u001c\u0192",
    "\u000b\u001c\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0005#\u01b5\n#\u0003$\u0003$\u0007$\u01b9\n$\f$\u000e",
    "$\u01bc\u000b$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003&\u0003&\u0005",
    "&\u01c5\n&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0007\'\u01d1\n\'\f\'\u000e\'\u01d4\u000b\'\u0003",
    "\'\u0003\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003",
    "(\u0003)\u0003)\u0003)\u0007)\u01e4\n)\f)\u000e)\u01e7\u000b)\u0003",
    "*\u0003*\u0003*\u0005*\u01ec\n*\u0003*\u0003*\u0003*\u0003*\u0003+\u0003",
    "+\u0003+\u0007+\u01f5\n+\f+\u000e+\u01f8\u000b+\u0003,\u0003,\u0003",
    ",\u0005,\u01fd\n,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0005,\u0208\n,\u0003,\u0003,\u0003,\u0003,\u0005,\u020e\n",
    ",\u0003-\u0003-\u0003-\u0003-\u0007-\u0214\n-\f-\u000e-\u0217\u000b",
    "-\u0003-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003",
    "/\u0007/\u0223\n/\f/\u000e/\u0226\u000b/\u0003/\u0003/\u00030\u0003",
    "0\u00030\u00031\u00031\u00031\u00031\u00031\u00031\u00032\u00032\u0003",
    "3\u00033\u00034\u00034\u00034\u00034\u00034\u00034\u00074\u023d\n4\f",
    "4\u000e4\u0240\u000b4\u00034\u00034\u00034\u00035\u00035\u00035\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00056\u0253\n6\u00037\u00037\u00037\u00037\u00037\u00037\u00077\u025b",
    "\n7\f7\u000e7\u025e\u000b7\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00077\u0266\n7\f7\u000e7\u0269\u000b7\u00037\u00037\u00038\u0003",
    "8\u00039\u00039\u00059\u0271\n9\u0003:\u0003:\u0003;\u0003;\u0003<\u0003",
    "<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003>\u0003",
    ">\u0005>\u0283\n>\u0003?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0007@\u028d\n@\f@\u000e@\u0290\u000b@\u0003@\u0003@\u0005@\u0294",
    "\n@\u0003@\u0003@\u0003@\u0003A\u0003A\u0003B\u0003B\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0005C\u02a2\nC\u0003D\u0003D\u0003D\u0002\u0005\u0012",
    "\"6E\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0002\u000f\u0004\u0002##TT\u0005\u0002\t\t>>ZZ\b",
    "\u0002  $$&&2244==\u0004\u0002  ==\u0006\u0002\u001c\u001c88;;AA\b\u0002",
    "\u0006\u0006\'\'88AACDOO\u0006\u0002\u000b\r\u0013\u0014KLQR\b\u0002",
    "\u0006\u0006\'\'88AACCOO\u0005\u0002!!//11\u0004\u0002\b\bNN\u0007\u0002",
    "\u0007\u0007\u000e\u000e\u0015\u00155577\b\u0002\t\t5577;;>>AA\u0003",
    "\u0002\\^\u0002\u02ac\u0002\u0088\u0003\u0002\u0002\u0002\u0004\u008e",
    "\u0003\u0002\u0002\u0002\u0006\u0097\u0003\u0002\u0002\u0002\b\u00a7",
    "\u0003\u0002\u0002\u0002\n\u00aa\u0003\u0002\u0002\u0002\f\u00ad\u0003",
    "\u0002\u0002\u0002\u000e\u00b1\u0003\u0002\u0002\u0002\u0010\u00b8\u0003",
    "\u0002\u0002\u0002\u0012\u00ce\u0003\u0002\u0002\u0002\u0014\u00d9\u0003",
    "\u0002\u0002\u0002\u0016\u00db\u0003\u0002\u0002\u0002\u0018\u00dd\u0003",
    "\u0002\u0002\u0002\u001a\u00df\u0003\u0002\u0002\u0002\u001c\u00e1\u0003",
    "\u0002\u0002\u0002\u001e\u00e3\u0003\u0002\u0002\u0002 \u00e5\u0003",
    "\u0002\u0002\u0002\"\u00f5\u0003\u0002\u0002\u0002$\u0100\u0003\u0002",
    "\u0002\u0002&\u0106\u0003\u0002\u0002\u0002(\u0108\u0003\u0002\u0002",
    "\u0002*\u010a\u0003\u0002\u0002\u0002,\u010e\u0003\u0002\u0002\u0002",
    ".\u0110\u0003\u0002\u0002\u00020\u0115\u0003\u0002\u0002\u00022\u011a",
    "\u0003\u0002\u0002\u00024\u0128\u0003\u0002\u0002\u00026\u0170\u0003",
    "\u0002\u0002\u00028\u0193\u0003\u0002\u0002\u0002:\u0195\u0003\u0002",
    "\u0002\u0002<\u0197\u0003\u0002\u0002\u0002>\u019c\u0003\u0002\u0002",
    "\u0002@\u01a1\u0003\u0002\u0002\u0002B\u01a3\u0003\u0002\u0002\u0002",
    "D\u01b4\u0003\u0002\u0002\u0002F\u01b6\u0003\u0002\u0002\u0002H\u01bd",
    "\u0003\u0002\u0002\u0002J\u01c4\u0003\u0002\u0002\u0002L\u01c6\u0003",
    "\u0002\u0002\u0002N\u01d7\u0003\u0002\u0002\u0002P\u01e0\u0003\u0002",
    "\u0002\u0002R\u01e8\u0003\u0002\u0002\u0002T\u01f1\u0003\u0002\u0002",
    "\u0002V\u020d\u0003\u0002\u0002\u0002X\u020f\u0003\u0002\u0002\u0002",
    "Z\u021a\u0003\u0002\u0002\u0002\\\u021e\u0003\u0002\u0002\u0002^\u0229",
    "\u0003\u0002\u0002\u0002`\u022c\u0003\u0002\u0002\u0002b\u0232\u0003",
    "\u0002\u0002\u0002d\u0234\u0003\u0002\u0002\u0002f\u0236\u0003\u0002",
    "\u0002\u0002h\u0244\u0003\u0002\u0002\u0002j\u0252\u0003\u0002\u0002",
    "\u0002l\u0254\u0003\u0002\u0002\u0002n\u026c\u0003\u0002\u0002\u0002",
    "p\u0270\u0003\u0002\u0002\u0002r\u0272\u0003\u0002\u0002\u0002t\u0274",
    "\u0003\u0002\u0002\u0002v\u0276\u0003\u0002\u0002\u0002x\u027b\u0003",
    "\u0002\u0002\u0002z\u0282\u0003\u0002\u0002\u0002|\u0284\u0003\u0002",
    "\u0002\u0002~\u0286\u0003\u0002\u0002\u0002\u0080\u0298\u0003\u0002",
    "\u0002\u0002\u0082\u029a\u0003\u0002\u0002\u0002\u0084\u02a1\u0003\u0002",
    "\u0002\u0002\u0086\u02a3\u0003\u0002\u0002\u0002\u0088\u008a\u0005\u0004",
    "\u0003\u0002\u0089\u008b\u0005\b\u0005\u0002\u008a\u0089\u0003\u0002",
    "\u0002\u0002\u008a\u008b\u0003\u0002\u0002\u0002\u008b\u008c\u0003\u0002",
    "\u0002\u0002\u008c\u008d\u0005\n\u0006\u0002\u008d\u0003\u0003\u0002",
    "\u0002\u0002\u008e\u008f\u0007\u0005\u0002\u0002\u008f\u0094\u0005\u0006",
    "\u0004\u0002\u0090\u0091\u0007\u0011\u0002\u0002\u0091\u0093\u0005\u0006",
    "\u0004\u0002\u0092\u0090\u0003\u0002\u0002\u0002\u0093\u0096\u0003\u0002",
    "\u0002\u0002\u0094\u0092\u0003\u0002\u0002\u0002\u0094\u0095\u0003\u0002",
    "\u0002\u0002\u0095\u0005\u0003\u0002\u0002\u0002\u0096\u0094\u0003\u0002",
    "\u0002\u0002\u0097\u0098\u0005\f\u0007\u0002\u0098\u009a\u0007*\u0002",
    "\u0002\u0099\u009b\u0007-\u0002\u0002\u009a\u0099\u0003\u0002\u0002",
    "\u0002\u009a\u009b\u0003\u0002\u0002\u0002\u009b\u009c\u0003\u0002\u0002",
    "\u0002\u009c\u00a1\u0005\u0086D\u0002\u009d\u009e\u0007\u0011\u0002",
    "\u0002\u009e\u00a0\u0005\u0086D\u0002\u009f\u009d\u0003\u0002\u0002",
    "\u0002\u00a0\u00a3\u0003\u0002\u0002\u0002\u00a1\u009f\u0003\u0002\u0002",
    "\u0002\u00a1\u00a2\u0003\u0002\u0002\u0002\u00a2\u00a5\u0003\u0002\u0002",
    "\u0002\u00a3\u00a1\u0003\u0002\u0002\u0002\u00a4\u00a6\u0007H\u0002",
    "\u0002\u00a5\u00a4\u0003\u0002\u0002\u0002\u00a5\u00a6\u0003\u0002\u0002",
    "\u0002\u00a6\u0007\u0003\u0002\u0002\u0002\u00a7\u00a8\u0007X\u0002",
    "\u0002\u00a8\u00a9\u0005\u0012\n\u0002\u00a9\t\u0003\u0002\u0002\u0002",
    "\u00aa\u00ab\u0007E\u0002\u0002\u00ab\u00ac\u0005\u000e\b\u0002\u00ac",
    "\u000b\u0003\u0002\u0002\u0002\u00ad\u00ae\u0005\u0086D\u0002\u00ae",
    "\r\u0003\u0002\u0002\u0002\u00af\u00b2\u0005\u0010\t\u0002\u00b0\u00b2",
    "\u00052\u001a\u0002\u00b1\u00af\u0003\u0002\u0002\u0002\u00b1\u00b0",
    "\u0003\u0002\u0002\u0002\u00b2\u000f\u0003\u0002\u0002\u0002\u00b3\u00b9",
    "\u0005\u0012\n\u0002\u00b4\u00b9\u0005\"\u0012\u0002\u00b5\u00b9\u0005",
    "\u001e\u0010\u0002\u00b6\u00b9\u0005,\u0017\u0002\u00b7\u00b9\u0005",
    " \u0011\u0002\u00b8\u00b3\u0003\u0002\u0002\u0002\u00b8\u00b4\u0003",
    "\u0002\u0002\u0002\u00b8\u00b5\u0003\u0002\u0002\u0002\u00b8\u00b6\u0003",
    "\u0002\u0002\u0002\u00b8\u00b7\u0003\u0002\u0002\u0002\u00b9\u0011\u0003",
    "\u0002\u0002\u0002\u00ba\u00bb\b\n\u0001\u0002\u00bb\u00cf\u0005v<\u0002",
    "\u00bc\u00cf\u0005\u0016\f\u0002\u00bd\u00bf\u0005\u0014\u000b\u0002",
    "\u00be\u00c0\u0007-\u0002\u0002\u00bf\u00be\u0003\u0002\u0002\u0002",
    "\u00bf\u00c0\u0003\u0002\u0002\u0002\u00c0\u00c1\u0003\u0002\u0002\u0002",
    "\u00c1\u00c3\u0005\u0012\n\u0002\u00c2\u00c4\u0007H\u0002\u0002\u00c3",
    "\u00c2\u0003\u0002\u0002\u0002\u00c3\u00c4\u0003\u0002\u0002\u0002\u00c4",
    "\u00cf\u0003\u0002\u0002\u0002\u00c5\u00c6\u0005\"\u0012\u0002\u00c6",
    "\u00c7\u0005\u001a\u000e\u0002\u00c7\u00c8\u0005\"\u0012\u0002\u00c8",
    "\u00cf\u0003\u0002\u0002\u0002\u00c9\u00cf\u0005v<\u0002\u00ca\u00cb",
    "\u0005\u001e\u0010\u0002\u00cb\u00cc\u0005\u001c\u000f\u0002\u00cc\u00cd",
    "\u0005\u001e\u0010\u0002\u00cd\u00cf\u0003\u0002\u0002\u0002\u00ce\u00ba",
    "\u0003\u0002\u0002\u0002\u00ce\u00bc\u0003\u0002\u0002\u0002\u00ce\u00bd",
    "\u0003\u0002\u0002\u0002\u00ce\u00c5\u0003\u0002\u0002\u0002\u00ce\u00c9",
    "\u0003\u0002\u0002\u0002\u00ce\u00ca\u0003\u0002\u0002\u0002\u00cf\u00d6",
    "\u0003\u0002\u0002\u0002\u00d0\u00d1\f\u0006\u0002\u0002\u00d1\u00d2",
    "\u0005\u0018\r\u0002\u00d2\u00d3\u0005\u0012\n\u0007\u00d3\u00d5\u0003",
    "\u0002\u0002\u0002\u00d4\u00d0\u0003\u0002\u0002\u0002\u00d5\u00d8\u0003",
    "\u0002\u0002\u0002\u00d6\u00d4\u0003\u0002\u0002\u0002\u00d6\u00d7\u0003",
    "\u0002\u0002\u0002\u00d7\u0013\u0003\u0002\u0002\u0002\u00d8\u00d6\u0003",
    "\u0002\u0002\u0002\u00d9\u00da\u0007<\u0002\u0002\u00da\u0015\u0003",
    "\u0002\u0002\u0002\u00db\u00dc\t\u0002\u0002\u0002\u00dc\u0017\u0003",
    "\u0002\u0002\u0002\u00dd\u00de\t\u0003\u0002\u0002\u00de\u0019\u0003",
    "\u0002\u0002\u0002\u00df\u00e0\t\u0004\u0002\u0002\u00e0\u001b\u0003",
    "\u0002\u0002\u0002\u00e1\u00e2\t\u0005\u0002\u0002\u00e2\u001d\u0003",
    "\u0002\u0002\u0002\u00e3\u00e4\u0007`\u0002\u0002\u00e4\u001f\u0003",
    "\u0002\u0002\u0002\u00e5\u00e6\u0007;\u0002\u0002\u00e6!\u0003\u0002",
    "\u0002\u0002\u00e7\u00e8\b\u0012\u0001\u0002\u00e8\u00e9\u0005(\u0015",
    "\u0002\u00e9\u00ea\u0007-\u0002\u0002\u00ea\u00eb\u0005\"\u0012\u0002",
    "\u00eb\u00ec\u0007H\u0002\u0002\u00ec\u00f6\u0003\u0002\u0002\u0002",
    "\u00ed\u00ee\u0005*\u0016\u0002\u00ee\u00ef\u0007-\u0002\u0002\u00ef",
    "\u00f0\u0005\"\u0012\u0002\u00f0\u00f1\u0007H\u0002\u0002\u00f1\u00f6",
    "\u0003\u0002\u0002\u0002\u00f2\u00f6\u0005p9\u0002\u00f3\u00f6\u0007",
    "[\u0002\u0002\u00f4\u00f6\u0005$\u0013\u0002\u00f5\u00e7\u0003\u0002",
    "\u0002\u0002\u00f5\u00ed\u0003\u0002\u0002\u0002\u00f5\u00f2\u0003\u0002",
    "\u0002\u0002\u00f5\u00f3\u0003\u0002\u0002\u0002\u00f5\u00f4\u0003\u0002",
    "\u0002\u0002\u00f6\u00fd\u0003\u0002\u0002\u0002\u00f7\u00f8\f\u0006",
    "\u0002\u0002\u00f8\u00f9\u0005&\u0014\u0002\u00f9\u00fa\u0005\"\u0012",
    "\u0007\u00fa\u00fc\u0003\u0002\u0002\u0002\u00fb\u00f7\u0003\u0002\u0002",
    "\u0002\u00fc\u00ff\u0003\u0002\u0002\u0002\u00fd\u00fb\u0003\u0002\u0002",
    "\u0002\u00fd\u00fe\u0003\u0002\u0002\u0002\u00fe#\u0003\u0002\u0002",
    "\u0002\u00ff\u00fd\u0003\u0002\u0002\u0002\u0100\u0101\u0007-\u0002",
    "\u0002\u0101\u0102\u0007[\u0002\u0002\u0102\u0103\u0007\u0011\u0002",
    "\u0002\u0103\u0104\u0007[\u0002\u0002\u0104\u0105\u0007H\u0002\u0002",
    "\u0105%\u0003\u0002\u0002\u0002\u0106\u0107\t\u0006\u0002\u0002\u0107",
    "\'\u0003\u0002\u0002\u0002\u0108\u0109\t\u0007\u0002\u0002\u0109)\u0003",
    "\u0002\u0002\u0002\u010a\u010b\t\b\u0002\u0002\u010b+\u0003\u0002\u0002",
    "\u0002\u010c\u010f\u0005.\u0018\u0002\u010d\u010f\u00050\u0019\u0002",
    "\u010e\u010c\u0003\u0002\u0002\u0002\u010e\u010d\u0003\u0002\u0002\u0002",
    "\u010f-\u0003\u0002\u0002\u0002\u0110\u0111\u0007(\u0002\u0002\u0111",
    "\u0112\u0007-\u0002\u0002\u0112\u0113\u0005\f\u0007\u0002\u0113\u0114",
    "\u0007H\u0002\u0002\u0114/\u0003\u0002\u0002\u0002\u0115\u0116\u0007",
    "\u001a\u0002\u0002\u0116\u0117\u0007-\u0002\u0002\u0117\u0118\u0005",
    "\f\u0007\u0002\u0118\u0119\u0007H\u0002\u0002\u01191\u0003\u0002\u0002",
    "\u0002\u011a\u011b\u0007\u001f\u0002\u0002\u011b\u011c\u0007-\u0002",
    "\u0002\u011c\u011d\u00056\u001c\u0002\u011d\u011e\u0007\u0011\u0002",
    "\u0002\u011e\u0123\u0007`\u0002\u0002\u011f\u0120\u0007\u0011\u0002",
    "\u0002\u0120\u0122\u0007`\u0002\u0002\u0121\u011f\u0003\u0002\u0002",
    "\u0002\u0122\u0125\u0003\u0002\u0002\u0002\u0123\u0121\u0003\u0002\u0002",
    "\u0002\u0123\u0124\u0003\u0002\u0002\u0002\u0124\u0126\u0003\u0002\u0002",
    "\u0002\u0125\u0123\u0003\u0002\u0002\u0002\u0126\u0127\u0007H\u0002",
    "\u0002\u01273\u0003\u0002\u0002\u0002\u0128\u0129\u0007\u0019\u0002",
    "\u0002\u0129\u012a\u0007-\u0002\u0002\u012a\u012b\u0007`\u0002\u0002",
    "\u012b\u012c\u0007\u0011\u0002\u0002\u012c\u0131\u0007`\u0002\u0002",
    "\u012d\u012e\u0007\u0011\u0002\u0002\u012e\u0130\u0007`\u0002\u0002",
    "\u012f\u012d\u0003\u0002\u0002\u0002\u0130\u0133\u0003\u0002\u0002\u0002",
    "\u0131\u012f\u0003\u0002\u0002\u0002\u0131\u0132\u0003\u0002\u0002\u0002",
    "\u0132\u0134\u0003\u0002\u0002\u0002\u0133\u0131\u0003\u0002\u0002\u0002",
    "\u0134\u0135\u0007H\u0002\u0002\u01355\u0003\u0002\u0002\u0002\u0136",
    "\u0137\b\u001c\u0001\u0002\u0137\u0171\u0005\f\u0007\u0002\u0138\u0171",
    "\u0005\u0010\t\u0002\u0139\u0171\u0005l7\u0002\u013a\u0171\u0005f4\u0002",
    "\u013b\u0171\u00054\u001b\u0002\u013c\u013d\u0007S\u0002\u0002\u013d",
    "\u013e\u0007-\u0002\u0002\u013e\u013f\u00056\u001c\u0002\u013f\u0140",
    "\u0007\u0011\u0002\u0002\u0140\u0141\u0005T+\u0002\u0141\u0142\u0007",
    "H\u0002\u0002\u0142\u0171\u0003\u0002\u0002\u0002\u0143\u0144\u0007",
    "M\u0002\u0002\u0144\u0145\u0007-\u0002\u0002\u0145\u0146\u00056\u001c",
    "\u0002\u0146\u0147\u0007\u0011\u0002\u0002\u0147\u0148\u0007+\u0002",
    "\u0002\u0148\u0149\u0005P)\u0002\u0149\u014a\u0007F\u0002\u0002\u014a",
    "\u014b\u0007H\u0002\u0002\u014b\u0171\u0003\u0002\u0002\u0002\u014c",
    "\u014d\u0007\"\u0002\u0002\u014d\u014e\u0007-\u0002\u0002\u014e\u014f",
    "\u00056\u001c\u0002\u014f\u0150\u0007\u0011\u0002\u0002\u0150\u0151",
    "\u0007+\u0002\u0002\u0151\u0152\u0005T+\u0002\u0152\u0153\u0007F\u0002",
    "\u0002\u0153\u0154\u0007H\u0002\u0002\u0154\u0171\u0003\u0002\u0002",
    "\u0002\u0155\u0171\u0005<\u001f\u0002\u0156\u0171\u0005> \u0002\u0157",
    "\u0171\u0005B\"\u0002\u0158\u0171\u0005D#\u0002\u0159\u0171\u0005H%",
    "\u0002\u015a\u0171\u0005L\'\u0002\u015b\u0171\u0005N(\u0002\u015c\u015d",
    "\u0007I\u0002\u0002\u015d\u015e\u0007-\u0002\u0002\u015e\u015f\u0005",
    "6\u001c\u0002\u015f\u0160\u0007\u0011\u0002\u0002\u0160\u0161\u0007",
    "+\u0002\u0002\u0161\u0162\u0005T+\u0002\u0162\u0167\u0007F\u0002\u0002",
    "\u0163\u0164\u0007\u0011\u0002\u0002\u0164\u0166\u0005\\/\u0002\u0165",
    "\u0163\u0003\u0002\u0002\u0002\u0166\u0169\u0003\u0002\u0002\u0002\u0167",
    "\u0165\u0003\u0002\u0002\u0002\u0167\u0168\u0003\u0002\u0002\u0002\u0168",
    "\u016a\u0003\u0002\u0002\u0002\u0169\u0167\u0003\u0002\u0002\u0002\u016a",
    "\u016b\u0007H\u0002\u0002\u016b\u0171\u0003\u0002\u0002\u0002\u016c",
    "\u016d\u0007-\u0002\u0002\u016d\u016e\u00056\u001c\u0002\u016e\u016f",
    "\u0007H\u0002\u0002\u016f\u0171\u0003\u0002\u0002\u0002\u0170\u0136",
    "\u0003\u0002\u0002\u0002\u0170\u0138\u0003\u0002\u0002\u0002\u0170\u0139",
    "\u0003\u0002\u0002\u0002\u0170\u013a\u0003\u0002\u0002\u0002\u0170\u013b",
    "\u0003\u0002\u0002\u0002\u0170\u013c\u0003\u0002\u0002\u0002\u0170\u0143",
    "\u0003\u0002\u0002\u0002\u0170\u014c\u0003\u0002\u0002\u0002\u0170\u0155",
    "\u0003\u0002\u0002\u0002\u0170\u0156\u0003\u0002\u0002\u0002\u0170\u0157",
    "\u0003\u0002\u0002\u0002\u0170\u0158\u0003\u0002\u0002\u0002\u0170\u0159",
    "\u0003\u0002\u0002\u0002\u0170\u015a\u0003\u0002\u0002\u0002\u0170\u015b",
    "\u0003\u0002\u0002\u0002\u0170\u015c\u0003\u0002\u0002\u0002\u0170\u016c",
    "\u0003\u0002\u0002\u0002\u0171\u0190\u0003\u0002\u0002\u0002\u0172\u0173",
    "\f\u001a\u0002\u0002\u0173\u0174\u0005\u0018\r\u0002\u0174\u0175\u0005",
    "6\u001c\u001b\u0175\u018f\u0003\u0002\u0002\u0002\u0176\u0177\f\u0019",
    "\u0002\u0002\u0177\u0178\u00058\u001d\u0002\u0178\u0179\u00056\u001c",
    "\u001a\u0179\u018f\u0003\u0002\u0002\u0002\u017a\u017b\f\u0018\u0002",
    "\u0002\u017b\u017c\u0007@\u0002\u0002\u017c\u018f\u00056\u001c\u0019",
    "\u017d\u017e\f\u0017\u0002\u0002\u017e\u017f\u0005\u001a\u000e\u0002",
    "\u017f\u0180\u00056\u001c\u0018\u0180\u018f\u0003\u0002\u0002\u0002",
    "\u0181\u0182\f\u0011\u0002\u0002\u0182\u0183\u0007,\u0002\u0002\u0183",
    "\u0184\u0005T+\u0002\u0184\u0185\u0007G\u0002\u0002\u0185\u018f\u0003",
    "\u0002\u0002\u0002\u0186\u0187\f\u000f\u0002\u0002\u0187\u0188\u0007",
    ",\u0002\u0002\u0188\u0189\u0005P)\u0002\u0189\u018a\u0007G\u0002\u0002",
    "\u018a\u018f\u0003\u0002\u0002\u0002\u018b\u018c\f\u0007\u0002\u0002",
    "\u018c\u018d\u0007\u001d\u0002\u0002\u018d\u018f\u0005J&\u0002\u018e",
    "\u0172\u0003\u0002\u0002\u0002\u018e\u0176\u0003\u0002\u0002\u0002\u018e",
    "\u017a\u0003\u0002\u0002\u0002\u018e\u017d\u0003\u0002\u0002\u0002\u018e",
    "\u0181\u0003\u0002\u0002\u0002\u018e\u0186\u0003\u0002\u0002\u0002\u018e",
    "\u018b\u0003\u0002\u0002\u0002\u018f\u0192\u0003\u0002\u0002\u0002\u0190",
    "\u018e\u0003\u0002\u0002\u0002\u0190\u0191\u0003\u0002\u0002\u0002\u0191",
    "7\u0003\u0002\u0002\u0002\u0192\u0190\u0003\u0002\u0002\u0002\u0193",
    "\u0194\t\u0006\u0002\u0002\u01949\u0003\u0002\u0002\u0002\u0195\u0196",
    "\t\t\u0002\u0002\u0196;\u0003\u0002\u0002\u0002\u0197\u0198\u0005:\u001e",
    "\u0002\u0198\u0199\u0007-\u0002\u0002\u0199\u019a\u00056\u001c\u0002",
    "\u019a\u019b\u0007H\u0002\u0002\u019b=\u0003\u0002\u0002\u0002\u019c",
    "\u019d\u0005*\u0016\u0002\u019d\u019e\u0007-\u0002\u0002\u019e\u019f",
    "\u00056\u001c\u0002\u019f\u01a0\u0007H\u0002\u0002\u01a0?\u0003\u0002",
    "\u0002\u0002\u01a1\u01a2\t\n\u0002\u0002\u01a2A\u0003\u0002\u0002\u0002",
    "\u01a3\u01a4\u0005@!\u0002\u01a4\u01a5\u0007-\u0002\u0002\u01a5\u01a6",
    "\u00056\u001c\u0002\u01a6\u01a7\u0007H\u0002\u0002\u01a7C\u0003\u0002",
    "\u0002\u0002\u01a8\u01a9\u0007<\u0002\u0002\u01a9\u01aa\u0007-\u0002",
    "\u0002\u01aa\u01ab\u00056\u001c\u0002\u01ab\u01ac\u0007H\u0002\u0002",
    "\u01ac\u01b5\u0003\u0002\u0002\u0002\u01ad\u01ae\u0007\u000f\u0002\u0002",
    "\u01ae\u01af\u0007-\u0002\u0002\u01af\u01b0\u00056\u001c\u0002\u01b0",
    "\u01b1\u0007\u0011\u0002\u0002\u01b1\u01b2\u0005\"\u0012\u0002\u01b2",
    "\u01b3\u0007H\u0002\u0002\u01b3\u01b5\u0003\u0002\u0002\u0002\u01b4",
    "\u01a8\u0003\u0002\u0002\u0002\u01b4\u01ad\u0003\u0002\u0002\u0002\u01b5",
    "E\u0003\u0002\u0002\u0002\u01b6\u01ba\u0005\u0086D\u0002\u01b7\u01b9",
    "\u0005\u0086D\u0002\u01b8\u01b7\u0003\u0002\u0002\u0002\u01b9\u01bc",
    "\u0003\u0002\u0002\u0002\u01ba\u01b8\u0003\u0002\u0002\u0002\u01ba\u01bb",
    "\u0003\u0002\u0002\u0002\u01bbG\u0003\u0002\u0002\u0002\u01bc\u01ba",
    "\u0003\u0002\u0002\u0002\u01bd\u01be\u0007-\u0002\u0002\u01be\u01bf",
    "\u0005F$\u0002\u01bf\u01c0\u0007H\u0002\u0002\u01c0\u01c1\u00056\u001c",
    "\u0002\u01c1I\u0003\u0002\u0002\u0002\u01c2\u01c5\u0005\u0086D\u0002",
    "\u01c3\u01c5\u0007[\u0002\u0002\u01c4\u01c2\u0003\u0002\u0002\u0002",
    "\u01c4\u01c3\u0003\u0002\u0002\u0002\u01c5K\u0003\u0002\u0002\u0002",
    "\u01c6\u01c7\u0007+\u0002\u0002\u01c7\u01c8\u0005J&\u0002\u01c8\u01c9",
    "\u0007\u0010\u0002\u0002\u01c9\u01ca\u00056\u001c\u0002\u01ca\u01d2",
    "\u0003\u0002\u0002\u0002\u01cb\u01cc\u0007J\u0002\u0002\u01cc\u01cd",
    "\u0005J&\u0002\u01cd\u01ce\u0007\u0010\u0002\u0002\u01ce\u01cf\u0005",
    "6\u001c\u0002\u01cf\u01d1\u0003\u0002\u0002\u0002\u01d0\u01cb\u0003",
    "\u0002\u0002\u0002\u01d1\u01d4\u0003\u0002\u0002\u0002\u01d2\u01d0\u0003",
    "\u0002\u0002\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\u01d5\u0003",
    "\u0002\u0002\u0002\u01d4\u01d2\u0003\u0002\u0002\u0002\u01d5\u01d6\u0007",
    "F\u0002\u0002\u01d6M\u0003\u0002\u0002\u0002\u01d7\u01d8\u0007\u0018",
    "\u0002\u0002\u01d8\u01d9\u0007-\u0002\u0002\u01d9\u01da\u00056\u001c",
    "\u0002\u01da\u01db\u0007\u0011\u0002\u0002\u01db\u01dc\u0005X-\u0002",
    "\u01dc\u01dd\u0007\u0011\u0002\u0002\u01dd\u01de\u0005\\/\u0002\u01de",
    "\u01df\u0007H\u0002\u0002\u01dfO\u0003\u0002\u0002\u0002\u01e0\u01e5",
    "\u0005R*\u0002\u01e1\u01e2\u0007\u0011\u0002\u0002\u01e2\u01e4\u0005",
    "R*\u0002\u01e3\u01e1\u0003\u0002\u0002\u0002\u01e4\u01e7\u0003\u0002",
    "\u0002\u0002\u01e5\u01e3\u0003\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002",
    "\u0002\u0002\u01e6Q\u0003\u0002\u0002\u0002\u01e7\u01e5\u0003\u0002",
    "\u0002\u0002\u01e8\u01eb\u0005\u0082B\u0002\u01e9\u01ea\u0007\u0010",
    "\u0002\u0002\u01ea\u01ec\u0005\u0080A\u0002\u01eb\u01e9\u0003\u0002",
    "\u0002\u0002\u01eb\u01ec\u0003\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002",
    "\u0002\u0002\u01ed\u01ee\u0007-\u0002\u0002\u01ee\u01ef\u00056\u001c",
    "\u0002\u01ef\u01f0\u0007H\u0002\u0002\u01f0S\u0003\u0002\u0002\u0002",
    "\u01f1\u01f6\u0005V,\u0002\u01f2\u01f3\u0007\u0011\u0002\u0002\u01f3",
    "\u01f5\u0005V,\u0002\u01f4\u01f2\u0003\u0002\u0002\u0002\u01f5\u01f8",
    "\u0003\u0002\u0002\u0002\u01f6\u01f4\u0003\u0002\u0002\u0002\u01f6\u01f7",
    "\u0003\u0002\u0002\u0002\u01f7U\u0003\u0002\u0002\u0002\u01f8\u01f6",
    "\u0003\u0002\u0002\u0002\u01f9\u01fc\u0005\u0082B\u0002\u01fa\u01fb",
    "\u0007\u0010\u0002\u0002\u01fb\u01fd\u0005\u0080A\u0002\u01fc\u01fa",
    "\u0003\u0002\u0002\u0002\u01fc\u01fd\u0003\u0002\u0002\u0002\u01fd\u01fe",
    "\u0003\u0002\u0002\u0002\u01fe\u01ff\u0007-\u0002\u0002\u01ff\u0200",
    "\u00056\u001c\u0002\u0200\u0201\u0007\u0010\u0002\u0002\u0201\u0202",
    "\u00056\u001c\u0002\u0202\u0203\u0007H\u0002\u0002\u0203\u020e\u0003",
    "\u0002\u0002\u0002\u0204\u0207\u0005\u0082B\u0002\u0205\u0206\u0007",
    "\u0010\u0002\u0002\u0206\u0208\u0005\u0080A\u0002\u0207\u0205\u0003",
    "\u0002\u0002\u0002\u0207\u0208\u0003\u0002\u0002\u0002\u0208\u0209\u0003",
    "\u0002\u0002\u0002\u0209\u020a\u0007-\u0002\u0002\u020a\u020b\u0005",
    "6\u001c\u0002\u020b\u020c\u0007H\u0002\u0002\u020c\u020e\u0003\u0002",
    "\u0002\u0002\u020d\u01f9\u0003\u0002\u0002\u0002\u020d\u0204\u0003\u0002",
    "\u0002\u0002\u020eW\u0003\u0002\u0002\u0002\u020f\u0210\u0007+\u0002",
    "\u0002\u0210\u0215\u0005Z.\u0002\u0211\u0212\u0007\u0011\u0002\u0002",
    "\u0212\u0214\u0005Z.\u0002\u0213\u0211\u0003\u0002\u0002\u0002\u0214",
    "\u0217\u0003\u0002\u0002\u0002\u0215\u0213\u0003\u0002\u0002\u0002\u0215",
    "\u0216\u0003\u0002\u0002\u0002\u0216\u0218\u0003\u0002\u0002\u0002\u0217",
    "\u0215\u0003\u0002\u0002\u0002\u0218\u0219\u0007F\u0002\u0002\u0219",
    "Y\u0003\u0002\u0002\u0002\u021a\u021b\u0005\u0082B\u0002\u021b\u021c",
    "\u0007\u0010\u0002\u0002\u021c\u021d\u0005\u0080A\u0002\u021d[\u0003",
    "\u0002\u0002\u0002\u021e\u021f\u0007+\u0002\u0002\u021f\u0224\u0005",
    "^0\u0002\u0220\u0221\u0007\u0011\u0002\u0002\u0221\u0223\u0005^0\u0002",
    "\u0222\u0220\u0003\u0002\u0002\u0002\u0223\u0226\u0003\u0002\u0002\u0002",
    "\u0224\u0222\u0003\u0002\u0002\u0002\u0224\u0225\u0003\u0002\u0002\u0002",
    "\u0225\u0227\u0003\u0002\u0002\u0002\u0226\u0224\u0003\u0002\u0002\u0002",
    "\u0227\u0228\u0007F\u0002\u0002\u0228]\u0003\u0002\u0002\u0002\u0229",
    "\u022a\u0005J&\u0002\u022a\u022b\u0005`1\u0002\u022b_\u0003\u0002\u0002",
    "\u0002\u022c\u022d\u0007-\u0002\u0002\u022d\u022e\u0005d3\u0002\u022e",
    "\u022f\u0007\u0010\u0002\u0002\u022f\u0230\u0005b2\u0002\u0230\u0231",
    "\u0007H\u0002\u0002\u0231a\u0003\u0002\u0002\u0002\u0232\u0233\t\u0002",
    "\u0002\u0002\u0233c\u0003\u0002\u0002\u0002\u0234\u0235\u0007`\u0002",
    "\u0002\u0235e\u0003\u0002\u0002\u0002\u0236\u0237\u0007\u0016\u0002",
    "\u0002\u0237\u0238\u0005\u0086D\u0002\u0238\u0239\u0007?\u0002\u0002",
    "\u0239\u023e\u0005h5\u0002\u023a\u023b\u0007\u0011\u0002\u0002\u023b",
    "\u023d\u0005h5\u0002\u023c\u023a\u0003\u0002\u0002\u0002\u023d\u0240",
    "\u0003\u0002\u0002\u0002\u023e\u023c\u0003\u0002\u0002\u0002\u023e\u023f",
    "\u0003\u0002\u0002\u0002\u023f\u0241\u0003\u0002\u0002\u0002\u0240\u023e",
    "\u0003\u0002\u0002\u0002\u0241\u0242\u0007W\u0002\u0002\u0242\u0243",
    "\u00056\u001c\u0002\u0243g\u0003\u0002\u0002\u0002\u0244\u0245\u0005",
    "\f\u0007\u0002\u0245\u0246\u0005V,\u0002\u0246i\u0003\u0002\u0002\u0002",
    "\u0247\u0248\u0005\u0010\t\u0002\u0248\u0249\u0007\u0010\u0002\u0002",
    "\u0249\u024a\u0005\u0010\t\u0002\u024a\u0253\u0003\u0002\u0002\u0002",
    "\u024b\u024c\u0007)\u0002\u0002\u024c\u024d\u0007-\u0002\u0002\u024d",
    "\u024e\u0005\f\u0007\u0002\u024e\u024f\u0007\u0011\u0002\u0002\u024f",
    "\u0250\u0005\u0082B\u0002\u0250\u0251\u0007H\u0002\u0002\u0251\u0253",
    "\u0003\u0002\u0002\u0002\u0252\u0247\u0003\u0002\u0002\u0002\u0252\u024b",
    "\u0003\u0002\u0002\u0002\u0253k\u0003\u0002\u0002\u0002\u0254\u0255",
    "\u0007\u0016\u0002\u0002\u0255\u0256\u0005\u0086D\u0002\u0256\u0257",
    "\u0007?\u0002\u0002\u0257\u025c\u0005h5\u0002\u0258\u0259\u0007\u0011",
    "\u0002\u0002\u0259\u025b\u0005h5\u0002\u025a\u0258\u0003\u0002\u0002",
    "\u0002\u025b\u025e\u0003\u0002\u0002\u0002\u025c\u025a\u0003\u0002\u0002",
    "\u0002\u025c\u025d\u0003\u0002\u0002\u0002\u025d\u025f\u0003\u0002\u0002",
    "\u0002\u025e\u025c\u0003\u0002\u0002\u0002\u025f\u0260\u0007V\u0002",
    "\u0002\u0260\u0261\u00070\u0002\u0002\u0261\u0262\u00072\u0002\u0002",
    "\u0262\u0267\u0005\u0084C\u0002\u0263\u0264\u0007J\u0002\u0002\u0264",
    "\u0266\u0005\u0084C\u0002\u0265\u0263\u0003\u0002\u0002\u0002\u0266",
    "\u0269\u0003\u0002\u0002\u0002\u0267\u0265\u0003\u0002\u0002\u0002\u0267",
    "\u0268\u0003\u0002\u0002\u0002\u0268\u026a\u0003\u0002\u0002\u0002\u0269",
    "\u0267\u0003\u0002\u0002\u0002\u026a\u026b\u0007$\u0002\u0002\u026b",
    "m\u0003\u0002\u0002\u0002\u026c\u026d\u0005V,\u0002\u026do\u0003\u0002",
    "\u0002\u0002\u026e\u0271\u0005z>\u0002\u026f\u0271\u0005~@\u0002\u0270",
    "\u026e\u0003\u0002\u0002\u0002\u0270\u026f\u0003\u0002\u0002\u0002\u0271",
    "q\u0003\u0002\u0002\u0002\u0272\u0273\t\u000b\u0002\u0002\u0273s\u0003",
    "\u0002\u0002\u0002\u0274\u0275\t\f\u0002\u0002\u0275u\u0003\u0002\u0002",
    "\u0002\u0276\u0277\u0005r:\u0002\u0277\u0278\u0007-\u0002\u0002\u0278",
    "\u0279\u00056\u001c\u0002\u0279\u027a\u0007H\u0002\u0002\u027aw\u0003",
    "\u0002\u0002\u0002\u027b\u027c\u0005t;\u0002\u027c\u027d\u0007-\u0002",
    "\u0002\u027d\u027e\u00056\u001c\u0002\u027e\u027f\u0007H\u0002\u0002",
    "\u027fy\u0003\u0002\u0002\u0002\u0280\u0283\u0005v<\u0002\u0281\u0283",
    "\u0005x=\u0002\u0282\u0280\u0003\u0002\u0002\u0002\u0282\u0281\u0003",
    "\u0002\u0002\u0002\u0283{\u0003\u0002\u0002\u0002\u0284\u0285\t\r\u0002",
    "\u0002\u0285}\u0003\u0002\u0002\u0002\u0286\u0287\u0007\u0012\u0002",
    "\u0002\u0287\u0288\u0005|?\u0002\u0288\u0289\u0007?\u0002\u0002\u0289",
    "\u028e\u0005h5\u0002\u028a\u028b\u0007\u0011\u0002\u0002\u028b\u028d",
    "\u0005h5\u0002\u028c\u028a\u0003\u0002\u0002\u0002\u028d\u0290\u0003",
    "\u0002\u0002\u0002\u028e\u028c\u0003\u0002\u0002\u0002\u028e\u028f\u0003",
    "\u0002\u0002\u0002\u028f\u0293\u0003\u0002\u0002\u0002\u0290\u028e\u0003",
    "\u0002\u0002\u0002\u0291\u0292\u0007X\u0002\u0002\u0292\u0294\u0005",
    "\u0012\n\u0002\u0293\u0291\u0003\u0002\u0002\u0002\u0293\u0294\u0003",
    "\u0002\u0002\u0002\u0294\u0295\u0003\u0002\u0002\u0002\u0295\u0296\u0007",
    "U\u0002\u0002\u0296\u0297\u00056\u001c\u0002\u0297\u007f\u0003\u0002",
    "\u0002\u0002\u0298\u0299\u0007`\u0002\u0002\u0299\u0081\u0003\u0002",
    "\u0002\u0002\u029a\u029b\u0005\u0086D\u0002\u029b\u0083\u0003\u0002",
    "\u0002\u0002\u029c\u02a2\u0007`\u0002\u0002\u029d\u02a2\u0007T\u0002",
    "\u0002\u029e\u02a2\u0007#\u0002\u0002\u029f\u02a2\u0007[\u0002\u0002",
    "\u02a0\u02a2\u0005$\u0013\u0002\u02a1\u029c\u0003\u0002\u0002\u0002",
    "\u02a1\u029d\u0003\u0002\u0002\u0002\u02a1\u029e\u0003\u0002\u0002\u0002",
    "\u02a1\u029f\u0003\u0002\u0002\u0002\u02a1\u02a0\u0003\u0002\u0002\u0002",
    "\u02a2\u0085\u0003\u0002\u0002\u0002\u02a3\u02a4\t\u000e\u0002\u0002",
    "\u02a4\u0087\u0003\u0002\u0002\u0002+\u008a\u0094\u009a\u00a1\u00a5",
    "\u00b1\u00b8\u00bf\u00c3\u00ce\u00d6\u00f5\u00fd\u010e\u0123\u0131\u0167",
    "\u0170\u018e\u0190\u01b4\u01ba\u01c4\u01d2\u01e5\u01eb\u01f6\u01fc\u0207",
    "\u020d\u0215\u0224\u023e\u0252\u025c\u0267\u0270\u0282\u028e\u0293\u02a1"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, "'@'", 
                     null, null, null, null, null, "':'", "','", null, null, 
                     null, null, null, "'$'", null, null, null, null, "'/'", 
                     "'.'", "'::'", null, "'='", null, null, null, "'>'", 
                     "'/>'", "'>='", null, null, null, null, "'{'", "'['", 
                     "'('", null, null, null, null, "'<'", "'</'", "'<='", 
                     null, null, null, "'-'", null, null, "'*'", null, "'!='", 
                     null, null, null, "'+'", null, null, null, null, "'}'", 
                     "']'", "')'", null, "';'" ];

var symbolicNames = [ null, "NodeType", "AxisNameXpath", "FOR", "ABSOLUTE_VALUE", 
                      "ADD", "ALL", "AND", "AT", "ARCSIN", "ARCCOS", "ARCTAN", 
                      "AVG", "BIT", "COLON", "COMMA", "CONDENSE", "COS", 
                      "COSH", "COUNT", "COVERAGE", "COVERAGE_VARIABLE_NAME_PREFIX", 
                      "CRS_TRANSFORM", "DECODE", "DESCRIBE_COVERAGE", "DIV", 
                      "DIVISION", "DOT", "DOUBLE_COLON", "ENCODE", "EQUAL", 
                      "EXP", "EXTEND", "FALSE", "GREATER_THAN", "GREATER_THAN_SLASH", 
                      "GREATER_OR_EQUAL_THAN", "IMAGINARY_PART", "ID", "IMGCRSDOMAIN", 
                      "IN", "LEFT_BRACE", "LEFT_BRACKET", "LEFT_PARANTHESIS", 
                      "LET", "LN", "LIST", "LOG", "LOWER_THAN", "LOWER_THAN_SLASH", 
                      "LOWER_OR_EQUAL_THAN", "MAX", "METADATA", "MIN", "MINUS", 
                      "MIXED", "MOD", "MULTIPLICATION", "NOT", "NOT_EQUAL", 
                      "OR", "OVER", "OVERLAY", "PLUS", "POWER", "REAL_PART", 
                      "ROUND", "RETURN", "RIGHT_BRACE", "RIGHT_BRACKET", 
                      "RIGHT_PARANTHESIS", "SCALE", "SEMICOLON", "SIN", 
                      "SINH", "SLICE", "SOME", "SQUARE_ROOT", "STRUCT", 
                      "TAN", "TANH", "TRIM", "TRUE", "USING", "VALUE", "VALUES", 
                      "WHERE", "WRAP_RESULT", "XOR", "REAL_NUMBER_CONSTANT", 
                      "SIMPLE_IDENTIFIER", "SIMPLE_IDENTIFIER_WITH_NUMBERS", 
                      "IDENTIFIER", "NAME", "STRING_LITERAL", "WS", "XPATH_LITERAL", 
                      "NCName" ];

var ruleNames =  [ "wcpsQuery", "forClauseList", "forClause", "whereClause", 
                   "returnClause", "coverageVariableName", "processingExpression", 
                   "scalarExpression", "booleanScalarExpression", "booleanUnaryOperator", 
                   "booleanConstant", "booleanOperator", "numericalComparissonOperator", 
                   "stringOperator", "stringScalarExpression", "starExpression", 
                   "numericalScalarExpression", "complexNumberConstant", 
                   "numericalOperator", "numericalUnaryOperation", "trigonometricOperator", 
                   "getComponentExpression", "coverageIdExpression", "describeCoverageExpression", 
                   "encodedCoverageExpression", "decodeCoverageExpression", 
                   "coverageExpression", "coverageArithmeticOperator", "unaryArithmeticExpressionOperator", 
                   "unaryArithmeticExpression", "trigonometricExpression", 
                   "exponentialExpressionOperator", "exponentialExpression", 
                   "unaryBooleanExpression", "rangeType", "castExpression", 
                   "fieldName", "rangeConstructorExpression", "crsTransformExpression", 
                   "dimensionPointList", "dimensionPointElement", "dimensionIntervalList", 
                   "dimensionIntervalElement", "dimensionCrsList", "dimensionCrsElement", 
                   "fieldInterpolationList", "fieldInterpolationListElement", 
                   "interpolationMethod", "nullResistance", "interpolationType", 
                   "coverageConstructorExpression", "axisIterator", "intervalExpression", 
                   "coverageConstantExpression", "axisSpec", "condenseExpression", 
                   "reduceBooleanExpressionOperator", "reduceNumericalExpressionOperator", 
                   "reduceBooleanExpression", "reduceNumericalExpression", 
                   "reduceExpression", "condenseExpressionOperator", "generalCondenseExpression", 
                   "crsName", "axisName", "constant", "identifier" ];

function WCPSParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

WCPSParser.prototype = Object.create(antlr4.Parser.prototype);
WCPSParser.prototype.constructor = WCPSParser;

Object.defineProperty(WCPSParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

WCPSParser.EOF = antlr4.Token.EOF;
WCPSParser.NodeType = 1;
WCPSParser.AxisNameXpath = 2;
WCPSParser.FOR = 3;
WCPSParser.ABSOLUTE_VALUE = 4;
WCPSParser.ADD = 5;
WCPSParser.ALL = 6;
WCPSParser.AND = 7;
WCPSParser.AT = 8;
WCPSParser.ARCSIN = 9;
WCPSParser.ARCCOS = 10;
WCPSParser.ARCTAN = 11;
WCPSParser.AVG = 12;
WCPSParser.BIT = 13;
WCPSParser.COLON = 14;
WCPSParser.COMMA = 15;
WCPSParser.CONDENSE = 16;
WCPSParser.COS = 17;
WCPSParser.COSH = 18;
WCPSParser.COUNT = 19;
WCPSParser.COVERAGE = 20;
WCPSParser.COVERAGE_VARIABLE_NAME_PREFIX = 21;
WCPSParser.CRS_TRANSFORM = 22;
WCPSParser.DECODE = 23;
WCPSParser.DESCRIBE_COVERAGE = 24;
WCPSParser.DIV = 25;
WCPSParser.DIVISION = 26;
WCPSParser.DOT = 27;
WCPSParser.DOUBLE_COLON = 28;
WCPSParser.ENCODE = 29;
WCPSParser.EQUAL = 30;
WCPSParser.EXP = 31;
WCPSParser.EXTEND = 32;
WCPSParser.FALSE = 33;
WCPSParser.GREATER_THAN = 34;
WCPSParser.GREATER_THAN_SLASH = 35;
WCPSParser.GREATER_OR_EQUAL_THAN = 36;
WCPSParser.IMAGINARY_PART = 37;
WCPSParser.ID = 38;
WCPSParser.IMGCRSDOMAIN = 39;
WCPSParser.IN = 40;
WCPSParser.LEFT_BRACE = 41;
WCPSParser.LEFT_BRACKET = 42;
WCPSParser.LEFT_PARANTHESIS = 43;
WCPSParser.LET = 44;
WCPSParser.LN = 45;
WCPSParser.LIST = 46;
WCPSParser.LOG = 47;
WCPSParser.LOWER_THAN = 48;
WCPSParser.LOWER_THAN_SLASH = 49;
WCPSParser.LOWER_OR_EQUAL_THAN = 50;
WCPSParser.MAX = 51;
WCPSParser.METADATA = 52;
WCPSParser.MIN = 53;
WCPSParser.MINUS = 54;
WCPSParser.MIXED = 55;
WCPSParser.MOD = 56;
WCPSParser.MULTIPLICATION = 57;
WCPSParser.NOT = 58;
WCPSParser.NOT_EQUAL = 59;
WCPSParser.OR = 60;
WCPSParser.OVER = 61;
WCPSParser.OVERLAY = 62;
WCPSParser.PLUS = 63;
WCPSParser.POWER = 64;
WCPSParser.REAL_PART = 65;
WCPSParser.ROUND = 66;
WCPSParser.RETURN = 67;
WCPSParser.RIGHT_BRACE = 68;
WCPSParser.RIGHT_BRACKET = 69;
WCPSParser.RIGHT_PARANTHESIS = 70;
WCPSParser.SCALE = 71;
WCPSParser.SEMICOLON = 72;
WCPSParser.SIN = 73;
WCPSParser.SINH = 74;
WCPSParser.SLICE = 75;
WCPSParser.SOME = 76;
WCPSParser.SQUARE_ROOT = 77;
WCPSParser.STRUCT = 78;
WCPSParser.TAN = 79;
WCPSParser.TANH = 80;
WCPSParser.TRIM = 81;
WCPSParser.TRUE = 82;
WCPSParser.USING = 83;
WCPSParser.VALUE = 84;
WCPSParser.VALUES = 85;
WCPSParser.WHERE = 86;
WCPSParser.WRAP_RESULT = 87;
WCPSParser.XOR = 88;
WCPSParser.REAL_NUMBER_CONSTANT = 89;
WCPSParser.SIMPLE_IDENTIFIER = 90;
WCPSParser.SIMPLE_IDENTIFIER_WITH_NUMBERS = 91;
WCPSParser.IDENTIFIER = 92;
WCPSParser.NAME = 93;
WCPSParser.STRING_LITERAL = 94;
WCPSParser.WS = 95;
WCPSParser.XPATH_LITERAL = 96;
WCPSParser.NCName = 97;

WCPSParser.RULE_wcpsQuery = 0;
WCPSParser.RULE_forClauseList = 1;
WCPSParser.RULE_forClause = 2;
WCPSParser.RULE_whereClause = 3;
WCPSParser.RULE_returnClause = 4;
WCPSParser.RULE_coverageVariableName = 5;
WCPSParser.RULE_processingExpression = 6;
WCPSParser.RULE_scalarExpression = 7;
WCPSParser.RULE_booleanScalarExpression = 8;
WCPSParser.RULE_booleanUnaryOperator = 9;
WCPSParser.RULE_booleanConstant = 10;
WCPSParser.RULE_booleanOperator = 11;
WCPSParser.RULE_numericalComparissonOperator = 12;
WCPSParser.RULE_stringOperator = 13;
WCPSParser.RULE_stringScalarExpression = 14;
WCPSParser.RULE_starExpression = 15;
WCPSParser.RULE_numericalScalarExpression = 16;
WCPSParser.RULE_complexNumberConstant = 17;
WCPSParser.RULE_numericalOperator = 18;
WCPSParser.RULE_numericalUnaryOperation = 19;
WCPSParser.RULE_trigonometricOperator = 20;
WCPSParser.RULE_getComponentExpression = 21;
WCPSParser.RULE_coverageIdExpression = 22;
WCPSParser.RULE_describeCoverageExpression = 23;
WCPSParser.RULE_encodedCoverageExpression = 24;
WCPSParser.RULE_decodeCoverageExpression = 25;
WCPSParser.RULE_coverageExpression = 26;
WCPSParser.RULE_coverageArithmeticOperator = 27;
WCPSParser.RULE_unaryArithmeticExpressionOperator = 28;
WCPSParser.RULE_unaryArithmeticExpression = 29;
WCPSParser.RULE_trigonometricExpression = 30;
WCPSParser.RULE_exponentialExpressionOperator = 31;
WCPSParser.RULE_exponentialExpression = 32;
WCPSParser.RULE_unaryBooleanExpression = 33;
WCPSParser.RULE_rangeType = 34;
WCPSParser.RULE_castExpression = 35;
WCPSParser.RULE_fieldName = 36;
WCPSParser.RULE_rangeConstructorExpression = 37;
WCPSParser.RULE_crsTransformExpression = 38;
WCPSParser.RULE_dimensionPointList = 39;
WCPSParser.RULE_dimensionPointElement = 40;
WCPSParser.RULE_dimensionIntervalList = 41;
WCPSParser.RULE_dimensionIntervalElement = 42;
WCPSParser.RULE_dimensionCrsList = 43;
WCPSParser.RULE_dimensionCrsElement = 44;
WCPSParser.RULE_fieldInterpolationList = 45;
WCPSParser.RULE_fieldInterpolationListElement = 46;
WCPSParser.RULE_interpolationMethod = 47;
WCPSParser.RULE_nullResistance = 48;
WCPSParser.RULE_interpolationType = 49;
WCPSParser.RULE_coverageConstructorExpression = 50;
WCPSParser.RULE_axisIterator = 51;
WCPSParser.RULE_intervalExpression = 52;
WCPSParser.RULE_coverageConstantExpression = 53;
WCPSParser.RULE_axisSpec = 54;
WCPSParser.RULE_condenseExpression = 55;
WCPSParser.RULE_reduceBooleanExpressionOperator = 56;
WCPSParser.RULE_reduceNumericalExpressionOperator = 57;
WCPSParser.RULE_reduceBooleanExpression = 58;
WCPSParser.RULE_reduceNumericalExpression = 59;
WCPSParser.RULE_reduceExpression = 60;
WCPSParser.RULE_condenseExpressionOperator = 61;
WCPSParser.RULE_generalCondenseExpression = 62;
WCPSParser.RULE_crsName = 63;
WCPSParser.RULE_axisName = 64;
WCPSParser.RULE_constant = 65;
WCPSParser.RULE_identifier = 66;

function WcpsQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_wcpsQuery;
    return this;
}

WcpsQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WcpsQueryContext.prototype.constructor = WcpsQueryContext;


 
WcpsQueryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function WcpsQueryLabelContext(parser, ctx) {
	WcpsQueryContext.call(this, parser);
    WcpsQueryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WcpsQueryLabelContext.prototype = Object.create(WcpsQueryContext.prototype);
WcpsQueryLabelContext.prototype.constructor = WcpsQueryLabelContext;

WCPSParser.WcpsQueryLabelContext = WcpsQueryLabelContext;

WcpsQueryLabelContext.prototype.forClauseList = function() {
    return this.getTypedRuleContext(ForClauseListContext,0);
};

WcpsQueryLabelContext.prototype.returnClause = function() {
    return this.getTypedRuleContext(ReturnClauseContext,0);
};

WcpsQueryLabelContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};
WcpsQueryLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterWcpsQueryLabel(this);
	}
};

WcpsQueryLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitWcpsQueryLabel(this);
	}
};

WcpsQueryLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitWcpsQueryLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.WcpsQueryContext = WcpsQueryContext;

WCPSParser.prototype.wcpsQuery = function() {

    var localctx = new WcpsQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, WCPSParser.RULE_wcpsQuery);
    var _la = 0; // Token type
    try {
        localctx = new WcpsQueryLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 134;
        this.forClauseList();
        this.state = 136;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WCPSParser.WHERE) {
            this.state = 135;
            this.whereClause();
        }

        this.state = 138;
        this.returnClause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForClauseListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_forClauseList;
    return this;
}

ForClauseListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForClauseListContext.prototype.constructor = ForClauseListContext;


 
ForClauseListContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ForClauseListLabelContext(parser, ctx) {
	ForClauseListContext.call(this, parser);
    ForClauseListContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForClauseListLabelContext.prototype = Object.create(ForClauseListContext.prototype);
ForClauseListLabelContext.prototype.constructor = ForClauseListLabelContext;

WCPSParser.ForClauseListLabelContext = ForClauseListLabelContext;

ForClauseListLabelContext.prototype.FOR = function() {
    return this.getToken(WCPSParser.FOR, 0);
};

ForClauseListLabelContext.prototype.forClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ForClauseContext);
    } else {
        return this.getTypedRuleContext(ForClauseContext,i);
    }
};

ForClauseListLabelContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.COMMA);
    } else {
        return this.getToken(WCPSParser.COMMA, i);
    }
};

ForClauseListLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterForClauseListLabel(this);
	}
};

ForClauseListLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitForClauseListLabel(this);
	}
};

ForClauseListLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitForClauseListLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.ForClauseListContext = ForClauseListContext;

WCPSParser.prototype.forClauseList = function() {

    var localctx = new ForClauseListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, WCPSParser.RULE_forClauseList);
    var _la = 0; // Token type
    try {
        localctx = new ForClauseListLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 140;
        this.match(WCPSParser.FOR);

        this.state = 141;
        this.forClause();
        this.state = 146;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WCPSParser.COMMA) {
            this.state = 142;
            this.match(WCPSParser.COMMA);
            this.state = 143;
            this.forClause();
            this.state = 148;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_forClause;
    return this;
}

ForClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForClauseContext.prototype.constructor = ForClauseContext;


 
ForClauseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ForClauseLabelContext(parser, ctx) {
	ForClauseContext.call(this, parser);
    ForClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ForClauseLabelContext.prototype = Object.create(ForClauseContext.prototype);
ForClauseLabelContext.prototype.constructor = ForClauseLabelContext;

WCPSParser.ForClauseLabelContext = ForClauseLabelContext;

ForClauseLabelContext.prototype.coverageVariableName = function() {
    return this.getTypedRuleContext(CoverageVariableNameContext,0);
};

ForClauseLabelContext.prototype.IN = function() {
    return this.getToken(WCPSParser.IN, 0);
};

ForClauseLabelContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ForClauseLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

ForClauseLabelContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.COMMA);
    } else {
        return this.getToken(WCPSParser.COMMA, i);
    }
};


ForClauseLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
ForClauseLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterForClauseLabel(this);
	}
};

ForClauseLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitForClauseLabel(this);
	}
};

ForClauseLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitForClauseLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.ForClauseContext = ForClauseContext;

WCPSParser.prototype.forClause = function() {

    var localctx = new ForClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, WCPSParser.RULE_forClause);
    var _la = 0; // Token type
    try {
        localctx = new ForClauseLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 149;
        this.coverageVariableName();
        this.state = 150;
        this.match(WCPSParser.IN);
        this.state = 152;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WCPSParser.LEFT_PARANTHESIS) {
            this.state = 151;
            this.match(WCPSParser.LEFT_PARANTHESIS);
        }

        this.state = 154;
        this.identifier();
        this.state = 159;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 155;
                this.match(WCPSParser.COMMA);

                this.state = 156;
                this.identifier(); 
            }
            this.state = 161;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
        }

        this.state = 163;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WCPSParser.RIGHT_PARANTHESIS) {
            this.state = 162;
            this.match(WCPSParser.RIGHT_PARANTHESIS);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhereClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_whereClause;
    return this;
}

WhereClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereClauseContext.prototype.constructor = WhereClauseContext;


 
WhereClauseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function WhereClauseLabelContext(parser, ctx) {
	WhereClauseContext.call(this, parser);
    WhereClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WhereClauseLabelContext.prototype = Object.create(WhereClauseContext.prototype);
WhereClauseLabelContext.prototype.constructor = WhereClauseLabelContext;

WCPSParser.WhereClauseLabelContext = WhereClauseLabelContext;

WhereClauseLabelContext.prototype.WHERE = function() {
    return this.getToken(WCPSParser.WHERE, 0);
};

WhereClauseLabelContext.prototype.booleanScalarExpression = function() {
    return this.getTypedRuleContext(BooleanScalarExpressionContext,0);
};
WhereClauseLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterWhereClauseLabel(this);
	}
};

WhereClauseLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitWhereClauseLabel(this);
	}
};

WhereClauseLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitWhereClauseLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.WhereClauseContext = WhereClauseContext;

WCPSParser.prototype.whereClause = function() {

    var localctx = new WhereClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, WCPSParser.RULE_whereClause);
    try {
        localctx = new WhereClauseLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 165;
        this.match(WCPSParser.WHERE);
        this.state = 166;
        this.booleanScalarExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_returnClause;
    return this;
}

ReturnClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnClauseContext.prototype.constructor = ReturnClauseContext;


 
ReturnClauseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ReturnClauseLabelContext(parser, ctx) {
	ReturnClauseContext.call(this, parser);
    ReturnClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReturnClauseLabelContext.prototype = Object.create(ReturnClauseContext.prototype);
ReturnClauseLabelContext.prototype.constructor = ReturnClauseLabelContext;

WCPSParser.ReturnClauseLabelContext = ReturnClauseLabelContext;

ReturnClauseLabelContext.prototype.RETURN = function() {
    return this.getToken(WCPSParser.RETURN, 0);
};

ReturnClauseLabelContext.prototype.processingExpression = function() {
    return this.getTypedRuleContext(ProcessingExpressionContext,0);
};
ReturnClauseLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterReturnClauseLabel(this);
	}
};

ReturnClauseLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitReturnClauseLabel(this);
	}
};

ReturnClauseLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitReturnClauseLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.ReturnClauseContext = ReturnClauseContext;

WCPSParser.prototype.returnClause = function() {

    var localctx = new ReturnClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, WCPSParser.RULE_returnClause);
    try {
        localctx = new ReturnClauseLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 168;
        this.match(WCPSParser.RETURN);
        this.state = 169;
        this.processingExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoverageVariableNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_coverageVariableName;
    return this;
}

CoverageVariableNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoverageVariableNameContext.prototype.constructor = CoverageVariableNameContext;


 
CoverageVariableNameContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CoverageVariableNameLabelContext(parser, ctx) {
	CoverageVariableNameContext.call(this, parser);
    CoverageVariableNameContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageVariableNameLabelContext.prototype = Object.create(CoverageVariableNameContext.prototype);
CoverageVariableNameLabelContext.prototype.constructor = CoverageVariableNameLabelContext;

WCPSParser.CoverageVariableNameLabelContext = CoverageVariableNameLabelContext;

CoverageVariableNameLabelContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
CoverageVariableNameLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageVariableNameLabel(this);
	}
};

CoverageVariableNameLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageVariableNameLabel(this);
	}
};

CoverageVariableNameLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageVariableNameLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.CoverageVariableNameContext = CoverageVariableNameContext;

WCPSParser.prototype.coverageVariableName = function() {

    var localctx = new CoverageVariableNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, WCPSParser.RULE_coverageVariableName);
    try {
        localctx = new CoverageVariableNameLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 171;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProcessingExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_processingExpression;
    return this;
}

ProcessingExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProcessingExpressionContext.prototype.constructor = ProcessingExpressionContext;

ProcessingExpressionContext.prototype.scalarExpression = function() {
    return this.getTypedRuleContext(ScalarExpressionContext,0);
};

ProcessingExpressionContext.prototype.encodedCoverageExpression = function() {
    return this.getTypedRuleContext(EncodedCoverageExpressionContext,0);
};

ProcessingExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterProcessingExpression(this);
	}
};

ProcessingExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitProcessingExpression(this);
	}
};

ProcessingExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitProcessingExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.ProcessingExpressionContext = ProcessingExpressionContext;

WCPSParser.prototype.processingExpression = function() {

    var localctx = new ProcessingExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, WCPSParser.RULE_processingExpression);
    try {
        this.state = 175;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WCPSParser.ABSOLUTE_VALUE:
        case WCPSParser.ADD:
        case WCPSParser.ALL:
        case WCPSParser.ARCSIN:
        case WCPSParser.ARCCOS:
        case WCPSParser.ARCTAN:
        case WCPSParser.AVG:
        case WCPSParser.CONDENSE:
        case WCPSParser.COS:
        case WCPSParser.COSH:
        case WCPSParser.COUNT:
        case WCPSParser.DESCRIBE_COVERAGE:
        case WCPSParser.FALSE:
        case WCPSParser.IMAGINARY_PART:
        case WCPSParser.ID:
        case WCPSParser.LEFT_PARANTHESIS:
        case WCPSParser.MAX:
        case WCPSParser.MIN:
        case WCPSParser.MINUS:
        case WCPSParser.MULTIPLICATION:
        case WCPSParser.NOT:
        case WCPSParser.PLUS:
        case WCPSParser.REAL_PART:
        case WCPSParser.ROUND:
        case WCPSParser.SIN:
        case WCPSParser.SINH:
        case WCPSParser.SOME:
        case WCPSParser.SQUARE_ROOT:
        case WCPSParser.TAN:
        case WCPSParser.TANH:
        case WCPSParser.TRUE:
        case WCPSParser.REAL_NUMBER_CONSTANT:
        case WCPSParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 173;
            this.scalarExpression();
            break;
        case WCPSParser.ENCODE:
            this.enterOuterAlt(localctx, 2);
            this.state = 174;
            this.encodedCoverageExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ScalarExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_scalarExpression;
    return this;
}

ScalarExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScalarExpressionContext.prototype.constructor = ScalarExpressionContext;

ScalarExpressionContext.prototype.booleanScalarExpression = function() {
    return this.getTypedRuleContext(BooleanScalarExpressionContext,0);
};

ScalarExpressionContext.prototype.numericalScalarExpression = function() {
    return this.getTypedRuleContext(NumericalScalarExpressionContext,0);
};

ScalarExpressionContext.prototype.stringScalarExpression = function() {
    return this.getTypedRuleContext(StringScalarExpressionContext,0);
};

ScalarExpressionContext.prototype.getComponentExpression = function() {
    return this.getTypedRuleContext(GetComponentExpressionContext,0);
};

ScalarExpressionContext.prototype.starExpression = function() {
    return this.getTypedRuleContext(StarExpressionContext,0);
};

ScalarExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterScalarExpression(this);
	}
};

ScalarExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitScalarExpression(this);
	}
};

ScalarExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitScalarExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.ScalarExpressionContext = ScalarExpressionContext;

WCPSParser.prototype.scalarExpression = function() {

    var localctx = new ScalarExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, WCPSParser.RULE_scalarExpression);
    try {
        this.state = 182;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 177;
            this.booleanScalarExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 178;
            this.numericalScalarExpression(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 179;
            this.stringScalarExpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 180;
            this.getComponentExpression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 181;
            this.starExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanScalarExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_booleanScalarExpression;
    return this;
}

BooleanScalarExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanScalarExpressionContext.prototype.constructor = BooleanScalarExpressionContext;


 
BooleanScalarExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function BooleanBinaryScalarLabelContext(parser, ctx) {
	BooleanScalarExpressionContext.call(this, parser);
    BooleanScalarExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanBinaryScalarLabelContext.prototype = Object.create(BooleanScalarExpressionContext.prototype);
BooleanBinaryScalarLabelContext.prototype.constructor = BooleanBinaryScalarLabelContext;

WCPSParser.BooleanBinaryScalarLabelContext = BooleanBinaryScalarLabelContext;

BooleanBinaryScalarLabelContext.prototype.booleanScalarExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanScalarExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanScalarExpressionContext,i);
    }
};

BooleanBinaryScalarLabelContext.prototype.booleanOperator = function() {
    return this.getTypedRuleContext(BooleanOperatorContext,0);
};
BooleanBinaryScalarLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterBooleanBinaryScalarLabel(this);
	}
};

BooleanBinaryScalarLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitBooleanBinaryScalarLabel(this);
	}
};

BooleanBinaryScalarLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitBooleanBinaryScalarLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BooleanReduceExpressionContext(parser, ctx) {
	BooleanScalarExpressionContext.call(this, parser);
    BooleanScalarExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanReduceExpressionContext.prototype = Object.create(BooleanScalarExpressionContext.prototype);
BooleanReduceExpressionContext.prototype.constructor = BooleanReduceExpressionContext;

WCPSParser.BooleanReduceExpressionContext = BooleanReduceExpressionContext;

BooleanReduceExpressionContext.prototype.reduceBooleanExpression = function() {
    return this.getTypedRuleContext(ReduceBooleanExpressionContext,0);
};
BooleanReduceExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterBooleanReduceExpression(this);
	}
};

BooleanReduceExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitBooleanReduceExpression(this);
	}
};

BooleanReduceExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitBooleanReduceExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BooleanUnaryScalarLabelContext(parser, ctx) {
	BooleanScalarExpressionContext.call(this, parser);
    BooleanScalarExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanUnaryScalarLabelContext.prototype = Object.create(BooleanScalarExpressionContext.prototype);
BooleanUnaryScalarLabelContext.prototype.constructor = BooleanUnaryScalarLabelContext;

WCPSParser.BooleanUnaryScalarLabelContext = BooleanUnaryScalarLabelContext;

BooleanUnaryScalarLabelContext.prototype.booleanUnaryOperator = function() {
    return this.getTypedRuleContext(BooleanUnaryOperatorContext,0);
};

BooleanUnaryScalarLabelContext.prototype.booleanScalarExpression = function() {
    return this.getTypedRuleContext(BooleanScalarExpressionContext,0);
};

BooleanUnaryScalarLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

BooleanUnaryScalarLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
BooleanUnaryScalarLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterBooleanUnaryScalarLabel(this);
	}
};

BooleanUnaryScalarLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitBooleanUnaryScalarLabel(this);
	}
};

BooleanUnaryScalarLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitBooleanUnaryScalarLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BooleanStringComparisonScalarContext(parser, ctx) {
	BooleanScalarExpressionContext.call(this, parser);
    BooleanScalarExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanStringComparisonScalarContext.prototype = Object.create(BooleanScalarExpressionContext.prototype);
BooleanStringComparisonScalarContext.prototype.constructor = BooleanStringComparisonScalarContext;

WCPSParser.BooleanStringComparisonScalarContext = BooleanStringComparisonScalarContext;

BooleanStringComparisonScalarContext.prototype.stringScalarExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringScalarExpressionContext);
    } else {
        return this.getTypedRuleContext(StringScalarExpressionContext,i);
    }
};

BooleanStringComparisonScalarContext.prototype.stringOperator = function() {
    return this.getTypedRuleContext(StringOperatorContext,0);
};
BooleanStringComparisonScalarContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterBooleanStringComparisonScalar(this);
	}
};

BooleanStringComparisonScalarContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitBooleanStringComparisonScalar(this);
	}
};

BooleanStringComparisonScalarContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitBooleanStringComparisonScalar(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BooleanConstantLabelContext(parser, ctx) {
	BooleanScalarExpressionContext.call(this, parser);
    BooleanScalarExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanConstantLabelContext.prototype = Object.create(BooleanScalarExpressionContext.prototype);
BooleanConstantLabelContext.prototype.constructor = BooleanConstantLabelContext;

WCPSParser.BooleanConstantLabelContext = BooleanConstantLabelContext;

BooleanConstantLabelContext.prototype.booleanConstant = function() {
    return this.getTypedRuleContext(BooleanConstantContext,0);
};
BooleanConstantLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterBooleanConstantLabel(this);
	}
};

BooleanConstantLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitBooleanConstantLabel(this);
	}
};

BooleanConstantLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitBooleanConstantLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BooleanNumericalComparisonScalarLabelContext(parser, ctx) {
	BooleanScalarExpressionContext.call(this, parser);
    BooleanScalarExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BooleanNumericalComparisonScalarLabelContext.prototype = Object.create(BooleanScalarExpressionContext.prototype);
BooleanNumericalComparisonScalarLabelContext.prototype.constructor = BooleanNumericalComparisonScalarLabelContext;

WCPSParser.BooleanNumericalComparisonScalarLabelContext = BooleanNumericalComparisonScalarLabelContext;

BooleanNumericalComparisonScalarLabelContext.prototype.numericalScalarExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumericalScalarExpressionContext);
    } else {
        return this.getTypedRuleContext(NumericalScalarExpressionContext,i);
    }
};

BooleanNumericalComparisonScalarLabelContext.prototype.numericalComparissonOperator = function() {
    return this.getTypedRuleContext(NumericalComparissonOperatorContext,0);
};
BooleanNumericalComparisonScalarLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterBooleanNumericalComparisonScalarLabel(this);
	}
};

BooleanNumericalComparisonScalarLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitBooleanNumericalComparisonScalarLabel(this);
	}
};

BooleanNumericalComparisonScalarLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitBooleanNumericalComparisonScalarLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.prototype.booleanScalarExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BooleanScalarExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 16;
    this.enterRecursionRule(localctx, 16, WCPSParser.RULE_booleanScalarExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 204;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            localctx = new BooleanReduceExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 185;
            this.reduceBooleanExpression();
            break;

        case 2:
            localctx = new BooleanConstantLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 186;
            this.booleanConstant();
            break;

        case 3:
            localctx = new BooleanUnaryScalarLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 187;
            this.booleanUnaryOperator();
            this.state = 189;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
            if(la_===1) {
                this.state = 188;
                this.match(WCPSParser.LEFT_PARANTHESIS);

            }
            this.state = 191;
            this.booleanScalarExpression(0);
            this.state = 193;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
            if(la_===1) {
                this.state = 192;
                this.match(WCPSParser.RIGHT_PARANTHESIS);

            }
            break;

        case 4:
            localctx = new BooleanNumericalComparisonScalarLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 195;
            this.numericalScalarExpression(0);
            this.state = 196;
            this.numericalComparissonOperator();
            this.state = 197;
            this.numericalScalarExpression(0);
            break;

        case 5:
            localctx = new BooleanReduceExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 199;
            this.reduceBooleanExpression();
            break;

        case 6:
            localctx = new BooleanStringComparisonScalarContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 200;
            this.stringScalarExpression();
            this.state = 201;
            this.stringOperator();
            this.state = 202;
            this.stringScalarExpression();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 212;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new BooleanBinaryScalarLabelContext(this, new BooleanScalarExpressionContext(this, _parentctx, _parentState));
                this.pushNewRecursionContext(localctx, _startState, WCPSParser.RULE_booleanScalarExpression);
                this.state = 206;
                if (!( this.precpred(this._ctx, 4))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                }
                this.state = 207;
                this.booleanOperator();
                this.state = 208;
                this.booleanScalarExpression(5); 
            }
            this.state = 214;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function BooleanUnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_booleanUnaryOperator;
    return this;
}

BooleanUnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanUnaryOperatorContext.prototype.constructor = BooleanUnaryOperatorContext;

BooleanUnaryOperatorContext.prototype.NOT = function() {
    return this.getToken(WCPSParser.NOT, 0);
};

BooleanUnaryOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterBooleanUnaryOperator(this);
	}
};

BooleanUnaryOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitBooleanUnaryOperator(this);
	}
};

BooleanUnaryOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitBooleanUnaryOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.BooleanUnaryOperatorContext = BooleanUnaryOperatorContext;

WCPSParser.prototype.booleanUnaryOperator = function() {

    var localctx = new BooleanUnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, WCPSParser.RULE_booleanUnaryOperator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 215;
        this.match(WCPSParser.NOT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_booleanConstant;
    return this;
}

BooleanConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanConstantContext.prototype.constructor = BooleanConstantContext;

BooleanConstantContext.prototype.TRUE = function() {
    return this.getToken(WCPSParser.TRUE, 0);
};

BooleanConstantContext.prototype.FALSE = function() {
    return this.getToken(WCPSParser.FALSE, 0);
};

BooleanConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterBooleanConstant(this);
	}
};

BooleanConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitBooleanConstant(this);
	}
};

BooleanConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitBooleanConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.BooleanConstantContext = BooleanConstantContext;

WCPSParser.prototype.booleanConstant = function() {

    var localctx = new BooleanConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, WCPSParser.RULE_booleanConstant);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 217;
        _la = this._input.LA(1);
        if(!(_la===WCPSParser.FALSE || _la===WCPSParser.TRUE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_booleanOperator;
    return this;
}

BooleanOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanOperatorContext.prototype.constructor = BooleanOperatorContext;

BooleanOperatorContext.prototype.AND = function() {
    return this.getToken(WCPSParser.AND, 0);
};

BooleanOperatorContext.prototype.XOR = function() {
    return this.getToken(WCPSParser.XOR, 0);
};

BooleanOperatorContext.prototype.OR = function() {
    return this.getToken(WCPSParser.OR, 0);
};

BooleanOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterBooleanOperator(this);
	}
};

BooleanOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitBooleanOperator(this);
	}
};

BooleanOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitBooleanOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.BooleanOperatorContext = BooleanOperatorContext;

WCPSParser.prototype.booleanOperator = function() {

    var localctx = new BooleanOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, WCPSParser.RULE_booleanOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 219;
        _la = this._input.LA(1);
        if(!(_la===WCPSParser.AND || _la===WCPSParser.OR || _la===WCPSParser.XOR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericalComparissonOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_numericalComparissonOperator;
    return this;
}

NumericalComparissonOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericalComparissonOperatorContext.prototype.constructor = NumericalComparissonOperatorContext;

NumericalComparissonOperatorContext.prototype.GREATER_THAN = function() {
    return this.getToken(WCPSParser.GREATER_THAN, 0);
};

NumericalComparissonOperatorContext.prototype.GREATER_OR_EQUAL_THAN = function() {
    return this.getToken(WCPSParser.GREATER_OR_EQUAL_THAN, 0);
};

NumericalComparissonOperatorContext.prototype.LOWER_THAN = function() {
    return this.getToken(WCPSParser.LOWER_THAN, 0);
};

NumericalComparissonOperatorContext.prototype.LOWER_OR_EQUAL_THAN = function() {
    return this.getToken(WCPSParser.LOWER_OR_EQUAL_THAN, 0);
};

NumericalComparissonOperatorContext.prototype.EQUAL = function() {
    return this.getToken(WCPSParser.EQUAL, 0);
};

NumericalComparissonOperatorContext.prototype.NOT_EQUAL = function() {
    return this.getToken(WCPSParser.NOT_EQUAL, 0);
};

NumericalComparissonOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterNumericalComparissonOperator(this);
	}
};

NumericalComparissonOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitNumericalComparissonOperator(this);
	}
};

NumericalComparissonOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitNumericalComparissonOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.NumericalComparissonOperatorContext = NumericalComparissonOperatorContext;

WCPSParser.prototype.numericalComparissonOperator = function() {

    var localctx = new NumericalComparissonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, WCPSParser.RULE_numericalComparissonOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 221;
        _la = this._input.LA(1);
        if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (WCPSParser.EQUAL - 30)) | (1 << (WCPSParser.GREATER_THAN - 30)) | (1 << (WCPSParser.GREATER_OR_EQUAL_THAN - 30)) | (1 << (WCPSParser.LOWER_THAN - 30)) | (1 << (WCPSParser.LOWER_OR_EQUAL_THAN - 30)) | (1 << (WCPSParser.NOT_EQUAL - 30)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_stringOperator;
    return this;
}

StringOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringOperatorContext.prototype.constructor = StringOperatorContext;

StringOperatorContext.prototype.EQUAL = function() {
    return this.getToken(WCPSParser.EQUAL, 0);
};

StringOperatorContext.prototype.NOT_EQUAL = function() {
    return this.getToken(WCPSParser.NOT_EQUAL, 0);
};

StringOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterStringOperator(this);
	}
};

StringOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitStringOperator(this);
	}
};

StringOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitStringOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.StringOperatorContext = StringOperatorContext;

WCPSParser.prototype.stringOperator = function() {

    var localctx = new StringOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, WCPSParser.RULE_stringOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 223;
        _la = this._input.LA(1);
        if(!(_la===WCPSParser.EQUAL || _la===WCPSParser.NOT_EQUAL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringScalarExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_stringScalarExpression;
    return this;
}

StringScalarExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringScalarExpressionContext.prototype.constructor = StringScalarExpressionContext;


 
StringScalarExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function StringScalarExpressionLabelContext(parser, ctx) {
	StringScalarExpressionContext.call(this, parser);
    StringScalarExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StringScalarExpressionLabelContext.prototype = Object.create(StringScalarExpressionContext.prototype);
StringScalarExpressionLabelContext.prototype.constructor = StringScalarExpressionLabelContext;

WCPSParser.StringScalarExpressionLabelContext = StringScalarExpressionLabelContext;

StringScalarExpressionLabelContext.prototype.STRING_LITERAL = function() {
    return this.getToken(WCPSParser.STRING_LITERAL, 0);
};
StringScalarExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterStringScalarExpressionLabel(this);
	}
};

StringScalarExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitStringScalarExpressionLabel(this);
	}
};

StringScalarExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitStringScalarExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.StringScalarExpressionContext = StringScalarExpressionContext;

WCPSParser.prototype.stringScalarExpression = function() {

    var localctx = new StringScalarExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, WCPSParser.RULE_stringScalarExpression);
    try {
        localctx = new StringScalarExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 225;
        this.match(WCPSParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StarExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_starExpression;
    return this;
}

StarExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StarExpressionContext.prototype.constructor = StarExpressionContext;


 
StarExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function StarExpressionLabelContext(parser, ctx) {
	StarExpressionContext.call(this, parser);
    StarExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StarExpressionLabelContext.prototype = Object.create(StarExpressionContext.prototype);
StarExpressionLabelContext.prototype.constructor = StarExpressionLabelContext;

WCPSParser.StarExpressionLabelContext = StarExpressionLabelContext;

StarExpressionLabelContext.prototype.MULTIPLICATION = function() {
    return this.getToken(WCPSParser.MULTIPLICATION, 0);
};
StarExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterStarExpressionLabel(this);
	}
};

StarExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitStarExpressionLabel(this);
	}
};

StarExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitStarExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.StarExpressionContext = StarExpressionContext;

WCPSParser.prototype.starExpression = function() {

    var localctx = new StarExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, WCPSParser.RULE_starExpression);
    try {
        localctx = new StarExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 227;
        this.match(WCPSParser.MULTIPLICATION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericalScalarExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_numericalScalarExpression;
    return this;
}

NumericalScalarExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericalScalarExpressionContext.prototype.constructor = NumericalScalarExpressionContext;


 
NumericalScalarExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function NumericalTrigonometricScalarExpressionLabelContext(parser, ctx) {
	NumericalScalarExpressionContext.call(this, parser);
    NumericalScalarExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumericalTrigonometricScalarExpressionLabelContext.prototype = Object.create(NumericalScalarExpressionContext.prototype);
NumericalTrigonometricScalarExpressionLabelContext.prototype.constructor = NumericalTrigonometricScalarExpressionLabelContext;

WCPSParser.NumericalTrigonometricScalarExpressionLabelContext = NumericalTrigonometricScalarExpressionLabelContext;

NumericalTrigonometricScalarExpressionLabelContext.prototype.trigonometricOperator = function() {
    return this.getTypedRuleContext(TrigonometricOperatorContext,0);
};

NumericalTrigonometricScalarExpressionLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

NumericalTrigonometricScalarExpressionLabelContext.prototype.numericalScalarExpression = function() {
    return this.getTypedRuleContext(NumericalScalarExpressionContext,0);
};

NumericalTrigonometricScalarExpressionLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
NumericalTrigonometricScalarExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterNumericalTrigonometricScalarExpressionLabel(this);
	}
};

NumericalTrigonometricScalarExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitNumericalTrigonometricScalarExpressionLabel(this);
	}
};

NumericalTrigonometricScalarExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitNumericalTrigonometricScalarExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NumericalRealNumberExpressionLabelContext(parser, ctx) {
	NumericalScalarExpressionContext.call(this, parser);
    NumericalScalarExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumericalRealNumberExpressionLabelContext.prototype = Object.create(NumericalScalarExpressionContext.prototype);
NumericalRealNumberExpressionLabelContext.prototype.constructor = NumericalRealNumberExpressionLabelContext;

WCPSParser.NumericalRealNumberExpressionLabelContext = NumericalRealNumberExpressionLabelContext;

NumericalRealNumberExpressionLabelContext.prototype.REAL_NUMBER_CONSTANT = function() {
    return this.getToken(WCPSParser.REAL_NUMBER_CONSTANT, 0);
};
NumericalRealNumberExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterNumericalRealNumberExpressionLabel(this);
	}
};

NumericalRealNumberExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitNumericalRealNumberExpressionLabel(this);
	}
};

NumericalRealNumberExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitNumericalRealNumberExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NumericalCondenseExpressionLabelContext(parser, ctx) {
	NumericalScalarExpressionContext.call(this, parser);
    NumericalScalarExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumericalCondenseExpressionLabelContext.prototype = Object.create(NumericalScalarExpressionContext.prototype);
NumericalCondenseExpressionLabelContext.prototype.constructor = NumericalCondenseExpressionLabelContext;

WCPSParser.NumericalCondenseExpressionLabelContext = NumericalCondenseExpressionLabelContext;

NumericalCondenseExpressionLabelContext.prototype.condenseExpression = function() {
    return this.getTypedRuleContext(CondenseExpressionContext,0);
};
NumericalCondenseExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterNumericalCondenseExpressionLabel(this);
	}
};

NumericalCondenseExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitNumericalCondenseExpressionLabel(this);
	}
};

NumericalCondenseExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitNumericalCondenseExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NumericalUnaryScalarExpressionLabelContext(parser, ctx) {
	NumericalScalarExpressionContext.call(this, parser);
    NumericalScalarExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumericalUnaryScalarExpressionLabelContext.prototype = Object.create(NumericalScalarExpressionContext.prototype);
NumericalUnaryScalarExpressionLabelContext.prototype.constructor = NumericalUnaryScalarExpressionLabelContext;

WCPSParser.NumericalUnaryScalarExpressionLabelContext = NumericalUnaryScalarExpressionLabelContext;

NumericalUnaryScalarExpressionLabelContext.prototype.numericalUnaryOperation = function() {
    return this.getTypedRuleContext(NumericalUnaryOperationContext,0);
};

NumericalUnaryScalarExpressionLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

NumericalUnaryScalarExpressionLabelContext.prototype.numericalScalarExpression = function() {
    return this.getTypedRuleContext(NumericalScalarExpressionContext,0);
};

NumericalUnaryScalarExpressionLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
NumericalUnaryScalarExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterNumericalUnaryScalarExpressionLabel(this);
	}
};

NumericalUnaryScalarExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitNumericalUnaryScalarExpressionLabel(this);
	}
};

NumericalUnaryScalarExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitNumericalUnaryScalarExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NumericalBinaryScalarExpressionLabelContext(parser, ctx) {
	NumericalScalarExpressionContext.call(this, parser);
    NumericalScalarExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumericalBinaryScalarExpressionLabelContext.prototype = Object.create(NumericalScalarExpressionContext.prototype);
NumericalBinaryScalarExpressionLabelContext.prototype.constructor = NumericalBinaryScalarExpressionLabelContext;

WCPSParser.NumericalBinaryScalarExpressionLabelContext = NumericalBinaryScalarExpressionLabelContext;

NumericalBinaryScalarExpressionLabelContext.prototype.numericalScalarExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumericalScalarExpressionContext);
    } else {
        return this.getTypedRuleContext(NumericalScalarExpressionContext,i);
    }
};

NumericalBinaryScalarExpressionLabelContext.prototype.numericalOperator = function() {
    return this.getTypedRuleContext(NumericalOperatorContext,0);
};
NumericalBinaryScalarExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterNumericalBinaryScalarExpressionLabel(this);
	}
};

NumericalBinaryScalarExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitNumericalBinaryScalarExpressionLabel(this);
	}
};

NumericalBinaryScalarExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitNumericalBinaryScalarExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NumericalComplexNumberConstantContext(parser, ctx) {
	NumericalScalarExpressionContext.call(this, parser);
    NumericalScalarExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumericalComplexNumberConstantContext.prototype = Object.create(NumericalScalarExpressionContext.prototype);
NumericalComplexNumberConstantContext.prototype.constructor = NumericalComplexNumberConstantContext;

WCPSParser.NumericalComplexNumberConstantContext = NumericalComplexNumberConstantContext;

NumericalComplexNumberConstantContext.prototype.complexNumberConstant = function() {
    return this.getTypedRuleContext(ComplexNumberConstantContext,0);
};
NumericalComplexNumberConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterNumericalComplexNumberConstant(this);
	}
};

NumericalComplexNumberConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitNumericalComplexNumberConstant(this);
	}
};

NumericalComplexNumberConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitNumericalComplexNumberConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.prototype.numericalScalarExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new NumericalScalarExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 32;
    this.enterRecursionRule(localctx, 32, WCPSParser.RULE_numericalScalarExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 243;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WCPSParser.ABSOLUTE_VALUE:
        case WCPSParser.IMAGINARY_PART:
        case WCPSParser.MINUS:
        case WCPSParser.PLUS:
        case WCPSParser.REAL_PART:
        case WCPSParser.ROUND:
        case WCPSParser.SQUARE_ROOT:
            localctx = new NumericalUnaryScalarExpressionLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 230;
            this.numericalUnaryOperation();
            this.state = 231;
            this.match(WCPSParser.LEFT_PARANTHESIS);
            this.state = 232;
            this.numericalScalarExpression(0);
            this.state = 233;
            this.match(WCPSParser.RIGHT_PARANTHESIS);
            break;
        case WCPSParser.ARCSIN:
        case WCPSParser.ARCCOS:
        case WCPSParser.ARCTAN:
        case WCPSParser.COS:
        case WCPSParser.COSH:
        case WCPSParser.SIN:
        case WCPSParser.SINH:
        case WCPSParser.TAN:
        case WCPSParser.TANH:
            localctx = new NumericalTrigonometricScalarExpressionLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 235;
            this.trigonometricOperator();
            this.state = 236;
            this.match(WCPSParser.LEFT_PARANTHESIS);
            this.state = 237;
            this.numericalScalarExpression(0);
            this.state = 238;
            this.match(WCPSParser.RIGHT_PARANTHESIS);
            break;
        case WCPSParser.ADD:
        case WCPSParser.ALL:
        case WCPSParser.AVG:
        case WCPSParser.CONDENSE:
        case WCPSParser.COUNT:
        case WCPSParser.MAX:
        case WCPSParser.MIN:
        case WCPSParser.SOME:
            localctx = new NumericalCondenseExpressionLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 240;
            this.condenseExpression();
            break;
        case WCPSParser.REAL_NUMBER_CONSTANT:
            localctx = new NumericalRealNumberExpressionLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 241;
            this.match(WCPSParser.REAL_NUMBER_CONSTANT);
            break;
        case WCPSParser.LEFT_PARANTHESIS:
            localctx = new NumericalComplexNumberConstantContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 242;
            this.complexNumberConstant();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 251;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new NumericalBinaryScalarExpressionLabelContext(this, new NumericalScalarExpressionContext(this, _parentctx, _parentState));
                this.pushNewRecursionContext(localctx, _startState, WCPSParser.RULE_numericalScalarExpression);
                this.state = 245;
                if (!( this.precpred(this._ctx, 4))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                }
                this.state = 246;
                this.numericalOperator();
                this.state = 247;
                this.numericalScalarExpression(5); 
            }
            this.state = 253;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ComplexNumberConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_complexNumberConstant;
    return this;
}

ComplexNumberConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComplexNumberConstantContext.prototype.constructor = ComplexNumberConstantContext;


 
ComplexNumberConstantContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ComplexNumberConstantLabelContext(parser, ctx) {
	ComplexNumberConstantContext.call(this, parser);
    ComplexNumberConstantContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComplexNumberConstantLabelContext.prototype = Object.create(ComplexNumberConstantContext.prototype);
ComplexNumberConstantLabelContext.prototype.constructor = ComplexNumberConstantLabelContext;

WCPSParser.ComplexNumberConstantLabelContext = ComplexNumberConstantLabelContext;

ComplexNumberConstantLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

ComplexNumberConstantLabelContext.prototype.REAL_NUMBER_CONSTANT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.REAL_NUMBER_CONSTANT);
    } else {
        return this.getToken(WCPSParser.REAL_NUMBER_CONSTANT, i);
    }
};


ComplexNumberConstantLabelContext.prototype.COMMA = function() {
    return this.getToken(WCPSParser.COMMA, 0);
};

ComplexNumberConstantLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
ComplexNumberConstantLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterComplexNumberConstantLabel(this);
	}
};

ComplexNumberConstantLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitComplexNumberConstantLabel(this);
	}
};

ComplexNumberConstantLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitComplexNumberConstantLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.ComplexNumberConstantContext = ComplexNumberConstantContext;

WCPSParser.prototype.complexNumberConstant = function() {

    var localctx = new ComplexNumberConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, WCPSParser.RULE_complexNumberConstant);
    try {
        localctx = new ComplexNumberConstantLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 254;
        this.match(WCPSParser.LEFT_PARANTHESIS);
        this.state = 255;
        this.match(WCPSParser.REAL_NUMBER_CONSTANT);
        this.state = 256;
        this.match(WCPSParser.COMMA);
        this.state = 257;
        this.match(WCPSParser.REAL_NUMBER_CONSTANT);
        this.state = 258;
        this.match(WCPSParser.RIGHT_PARANTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericalOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_numericalOperator;
    return this;
}

NumericalOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericalOperatorContext.prototype.constructor = NumericalOperatorContext;

NumericalOperatorContext.prototype.PLUS = function() {
    return this.getToken(WCPSParser.PLUS, 0);
};

NumericalOperatorContext.prototype.MINUS = function() {
    return this.getToken(WCPSParser.MINUS, 0);
};

NumericalOperatorContext.prototype.MULTIPLICATION = function() {
    return this.getToken(WCPSParser.MULTIPLICATION, 0);
};

NumericalOperatorContext.prototype.DIVISION = function() {
    return this.getToken(WCPSParser.DIVISION, 0);
};

NumericalOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterNumericalOperator(this);
	}
};

NumericalOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitNumericalOperator(this);
	}
};

NumericalOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitNumericalOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.NumericalOperatorContext = NumericalOperatorContext;

WCPSParser.prototype.numericalOperator = function() {

    var localctx = new NumericalOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, WCPSParser.RULE_numericalOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 260;
        _la = this._input.LA(1);
        if(!(_la===WCPSParser.DIVISION || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (WCPSParser.MINUS - 54)) | (1 << (WCPSParser.MULTIPLICATION - 54)) | (1 << (WCPSParser.PLUS - 54)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericalUnaryOperationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_numericalUnaryOperation;
    return this;
}

NumericalUnaryOperationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericalUnaryOperationContext.prototype.constructor = NumericalUnaryOperationContext;

NumericalUnaryOperationContext.prototype.ABSOLUTE_VALUE = function() {
    return this.getToken(WCPSParser.ABSOLUTE_VALUE, 0);
};

NumericalUnaryOperationContext.prototype.SQUARE_ROOT = function() {
    return this.getToken(WCPSParser.SQUARE_ROOT, 0);
};

NumericalUnaryOperationContext.prototype.REAL_PART = function() {
    return this.getToken(WCPSParser.REAL_PART, 0);
};

NumericalUnaryOperationContext.prototype.IMAGINARY_PART = function() {
    return this.getToken(WCPSParser.IMAGINARY_PART, 0);
};

NumericalUnaryOperationContext.prototype.ROUND = function() {
    return this.getToken(WCPSParser.ROUND, 0);
};

NumericalUnaryOperationContext.prototype.MINUS = function() {
    return this.getToken(WCPSParser.MINUS, 0);
};

NumericalUnaryOperationContext.prototype.PLUS = function() {
    return this.getToken(WCPSParser.PLUS, 0);
};

NumericalUnaryOperationContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterNumericalUnaryOperation(this);
	}
};

NumericalUnaryOperationContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitNumericalUnaryOperation(this);
	}
};

NumericalUnaryOperationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitNumericalUnaryOperation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.NumericalUnaryOperationContext = NumericalUnaryOperationContext;

WCPSParser.prototype.numericalUnaryOperation = function() {

    var localctx = new NumericalUnaryOperationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, WCPSParser.RULE_numericalUnaryOperation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 262;
        _la = this._input.LA(1);
        if(!(_la===WCPSParser.ABSOLUTE_VALUE || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (WCPSParser.IMAGINARY_PART - 37)) | (1 << (WCPSParser.MINUS - 37)) | (1 << (WCPSParser.PLUS - 37)) | (1 << (WCPSParser.REAL_PART - 37)) | (1 << (WCPSParser.ROUND - 37)))) !== 0) || _la===WCPSParser.SQUARE_ROOT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TrigonometricOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_trigonometricOperator;
    return this;
}

TrigonometricOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrigonometricOperatorContext.prototype.constructor = TrigonometricOperatorContext;

TrigonometricOperatorContext.prototype.SIN = function() {
    return this.getToken(WCPSParser.SIN, 0);
};

TrigonometricOperatorContext.prototype.COS = function() {
    return this.getToken(WCPSParser.COS, 0);
};

TrigonometricOperatorContext.prototype.TAN = function() {
    return this.getToken(WCPSParser.TAN, 0);
};

TrigonometricOperatorContext.prototype.SINH = function() {
    return this.getToken(WCPSParser.SINH, 0);
};

TrigonometricOperatorContext.prototype.COSH = function() {
    return this.getToken(WCPSParser.COSH, 0);
};

TrigonometricOperatorContext.prototype.TANH = function() {
    return this.getToken(WCPSParser.TANH, 0);
};

TrigonometricOperatorContext.prototype.ARCSIN = function() {
    return this.getToken(WCPSParser.ARCSIN, 0);
};

TrigonometricOperatorContext.prototype.ARCCOS = function() {
    return this.getToken(WCPSParser.ARCCOS, 0);
};

TrigonometricOperatorContext.prototype.ARCTAN = function() {
    return this.getToken(WCPSParser.ARCTAN, 0);
};

TrigonometricOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterTrigonometricOperator(this);
	}
};

TrigonometricOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitTrigonometricOperator(this);
	}
};

TrigonometricOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitTrigonometricOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.TrigonometricOperatorContext = TrigonometricOperatorContext;

WCPSParser.prototype.trigonometricOperator = function() {

    var localctx = new TrigonometricOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, WCPSParser.RULE_trigonometricOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 264;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WCPSParser.ARCSIN) | (1 << WCPSParser.ARCCOS) | (1 << WCPSParser.ARCTAN) | (1 << WCPSParser.COS) | (1 << WCPSParser.COSH))) !== 0) || ((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (WCPSParser.SIN - 73)) | (1 << (WCPSParser.SINH - 73)) | (1 << (WCPSParser.TAN - 73)) | (1 << (WCPSParser.TANH - 73)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GetComponentExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_getComponentExpression;
    return this;
}

GetComponentExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetComponentExpressionContext.prototype.constructor = GetComponentExpressionContext;

GetComponentExpressionContext.prototype.coverageIdExpression = function() {
    return this.getTypedRuleContext(CoverageIdExpressionContext,0);
};

GetComponentExpressionContext.prototype.describeCoverageExpression = function() {
    return this.getTypedRuleContext(DescribeCoverageExpressionContext,0);
};

GetComponentExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterGetComponentExpression(this);
	}
};

GetComponentExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitGetComponentExpression(this);
	}
};

GetComponentExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitGetComponentExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.GetComponentExpressionContext = GetComponentExpressionContext;

WCPSParser.prototype.getComponentExpression = function() {

    var localctx = new GetComponentExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, WCPSParser.RULE_getComponentExpression);
    try {
        this.state = 268;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WCPSParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 266;
            this.coverageIdExpression();
            break;
        case WCPSParser.DESCRIBE_COVERAGE:
            this.enterOuterAlt(localctx, 2);
            this.state = 267;
            this.describeCoverageExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoverageIdExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_coverageIdExpression;
    return this;
}

CoverageIdExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoverageIdExpressionContext.prototype.constructor = CoverageIdExpressionContext;


 
CoverageIdExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CoverageIdExpressionLabelContext(parser, ctx) {
	CoverageIdExpressionContext.call(this, parser);
    CoverageIdExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageIdExpressionLabelContext.prototype = Object.create(CoverageIdExpressionContext.prototype);
CoverageIdExpressionLabelContext.prototype.constructor = CoverageIdExpressionLabelContext;

WCPSParser.CoverageIdExpressionLabelContext = CoverageIdExpressionLabelContext;

CoverageIdExpressionLabelContext.prototype.ID = function() {
    return this.getToken(WCPSParser.ID, 0);
};

CoverageIdExpressionLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

CoverageIdExpressionLabelContext.prototype.coverageVariableName = function() {
    return this.getTypedRuleContext(CoverageVariableNameContext,0);
};

CoverageIdExpressionLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
CoverageIdExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageIdExpressionLabel(this);
	}
};

CoverageIdExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageIdExpressionLabel(this);
	}
};

CoverageIdExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageIdExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.CoverageIdExpressionContext = CoverageIdExpressionContext;

WCPSParser.prototype.coverageIdExpression = function() {

    var localctx = new CoverageIdExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, WCPSParser.RULE_coverageIdExpression);
    try {
        localctx = new CoverageIdExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 270;
        this.match(WCPSParser.ID);
        this.state = 271;
        this.match(WCPSParser.LEFT_PARANTHESIS);
        this.state = 272;
        this.coverageVariableName();
        this.state = 273;
        this.match(WCPSParser.RIGHT_PARANTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DescribeCoverageExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_describeCoverageExpression;
    return this;
}

DescribeCoverageExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescribeCoverageExpressionContext.prototype.constructor = DescribeCoverageExpressionContext;


 
DescribeCoverageExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DescribeCoverageExpressionLabelContext(parser, ctx) {
	DescribeCoverageExpressionContext.call(this, parser);
    DescribeCoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DescribeCoverageExpressionLabelContext.prototype = Object.create(DescribeCoverageExpressionContext.prototype);
DescribeCoverageExpressionLabelContext.prototype.constructor = DescribeCoverageExpressionLabelContext;

WCPSParser.DescribeCoverageExpressionLabelContext = DescribeCoverageExpressionLabelContext;

DescribeCoverageExpressionLabelContext.prototype.DESCRIBE_COVERAGE = function() {
    return this.getToken(WCPSParser.DESCRIBE_COVERAGE, 0);
};

DescribeCoverageExpressionLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

DescribeCoverageExpressionLabelContext.prototype.coverageVariableName = function() {
    return this.getTypedRuleContext(CoverageVariableNameContext,0);
};

DescribeCoverageExpressionLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
DescribeCoverageExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterDescribeCoverageExpressionLabel(this);
	}
};

DescribeCoverageExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitDescribeCoverageExpressionLabel(this);
	}
};

DescribeCoverageExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitDescribeCoverageExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.DescribeCoverageExpressionContext = DescribeCoverageExpressionContext;

WCPSParser.prototype.describeCoverageExpression = function() {

    var localctx = new DescribeCoverageExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, WCPSParser.RULE_describeCoverageExpression);
    try {
        localctx = new DescribeCoverageExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 275;
        this.match(WCPSParser.DESCRIBE_COVERAGE);
        this.state = 276;
        this.match(WCPSParser.LEFT_PARANTHESIS);
        this.state = 277;
        this.coverageVariableName();
        this.state = 278;
        this.match(WCPSParser.RIGHT_PARANTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EncodedCoverageExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_encodedCoverageExpression;
    return this;
}

EncodedCoverageExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EncodedCoverageExpressionContext.prototype.constructor = EncodedCoverageExpressionContext;


 
EncodedCoverageExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function EncodedCoverageExpressionLabelContext(parser, ctx) {
	EncodedCoverageExpressionContext.call(this, parser);
    EncodedCoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EncodedCoverageExpressionLabelContext.prototype = Object.create(EncodedCoverageExpressionContext.prototype);
EncodedCoverageExpressionLabelContext.prototype.constructor = EncodedCoverageExpressionLabelContext;

WCPSParser.EncodedCoverageExpressionLabelContext = EncodedCoverageExpressionLabelContext;

EncodedCoverageExpressionLabelContext.prototype.ENCODE = function() {
    return this.getToken(WCPSParser.ENCODE, 0);
};

EncodedCoverageExpressionLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

EncodedCoverageExpressionLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

EncodedCoverageExpressionLabelContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.COMMA);
    } else {
        return this.getToken(WCPSParser.COMMA, i);
    }
};


EncodedCoverageExpressionLabelContext.prototype.STRING_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.STRING_LITERAL);
    } else {
        return this.getToken(WCPSParser.STRING_LITERAL, i);
    }
};


EncodedCoverageExpressionLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
EncodedCoverageExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterEncodedCoverageExpressionLabel(this);
	}
};

EncodedCoverageExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitEncodedCoverageExpressionLabel(this);
	}
};

EncodedCoverageExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitEncodedCoverageExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.EncodedCoverageExpressionContext = EncodedCoverageExpressionContext;

WCPSParser.prototype.encodedCoverageExpression = function() {

    var localctx = new EncodedCoverageExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, WCPSParser.RULE_encodedCoverageExpression);
    var _la = 0; // Token type
    try {
        localctx = new EncodedCoverageExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 280;
        this.match(WCPSParser.ENCODE);
        this.state = 281;
        this.match(WCPSParser.LEFT_PARANTHESIS);
        this.state = 282;
        this.coverageExpression(0);
        this.state = 283;
        this.match(WCPSParser.COMMA);
        this.state = 284;
        this.match(WCPSParser.STRING_LITERAL);
        this.state = 289;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WCPSParser.COMMA) {
            this.state = 285;
            this.match(WCPSParser.COMMA);
            this.state = 286;
            this.match(WCPSParser.STRING_LITERAL);
            this.state = 291;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 292;
        this.match(WCPSParser.RIGHT_PARANTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecodeCoverageExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_decodeCoverageExpression;
    return this;
}

DecodeCoverageExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecodeCoverageExpressionContext.prototype.constructor = DecodeCoverageExpressionContext;


 
DecodeCoverageExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DecodedCoverageExpressionLabelContext(parser, ctx) {
	DecodeCoverageExpressionContext.call(this, parser);
    DecodeCoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DecodedCoverageExpressionLabelContext.prototype = Object.create(DecodeCoverageExpressionContext.prototype);
DecodedCoverageExpressionLabelContext.prototype.constructor = DecodedCoverageExpressionLabelContext;

WCPSParser.DecodedCoverageExpressionLabelContext = DecodedCoverageExpressionLabelContext;

DecodedCoverageExpressionLabelContext.prototype.DECODE = function() {
    return this.getToken(WCPSParser.DECODE, 0);
};

DecodedCoverageExpressionLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

DecodedCoverageExpressionLabelContext.prototype.STRING_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.STRING_LITERAL);
    } else {
        return this.getToken(WCPSParser.STRING_LITERAL, i);
    }
};


DecodedCoverageExpressionLabelContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.COMMA);
    } else {
        return this.getToken(WCPSParser.COMMA, i);
    }
};


DecodedCoverageExpressionLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
DecodedCoverageExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterDecodedCoverageExpressionLabel(this);
	}
};

DecodedCoverageExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitDecodedCoverageExpressionLabel(this);
	}
};

DecodedCoverageExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitDecodedCoverageExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.DecodeCoverageExpressionContext = DecodeCoverageExpressionContext;

WCPSParser.prototype.decodeCoverageExpression = function() {

    var localctx = new DecodeCoverageExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, WCPSParser.RULE_decodeCoverageExpression);
    var _la = 0; // Token type
    try {
        localctx = new DecodedCoverageExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 294;
        this.match(WCPSParser.DECODE);
        this.state = 295;
        this.match(WCPSParser.LEFT_PARANTHESIS);
        this.state = 296;
        this.match(WCPSParser.STRING_LITERAL);
        this.state = 297;
        this.match(WCPSParser.COMMA);
        this.state = 298;
        this.match(WCPSParser.STRING_LITERAL);
        this.state = 303;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WCPSParser.COMMA) {
            this.state = 299;
            this.match(WCPSParser.COMMA);
            this.state = 300;
            this.match(WCPSParser.STRING_LITERAL);
            this.state = 305;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 306;
        this.match(WCPSParser.RIGHT_PARANTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoverageExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_coverageExpression;
    return this;
}

CoverageExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoverageExpressionContext.prototype.constructor = CoverageExpressionContext;


 
CoverageExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function CoverageExpressionRangeSubsettingLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionRangeSubsettingLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionRangeSubsettingLabelContext.prototype.constructor = CoverageExpressionRangeSubsettingLabelContext;

WCPSParser.CoverageExpressionRangeSubsettingLabelContext = CoverageExpressionRangeSubsettingLabelContext;

CoverageExpressionRangeSubsettingLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

CoverageExpressionRangeSubsettingLabelContext.prototype.DOT = function() {
    return this.getToken(WCPSParser.DOT, 0);
};

CoverageExpressionRangeSubsettingLabelContext.prototype.fieldName = function() {
    return this.getTypedRuleContext(FieldNameContext,0);
};
CoverageExpressionRangeSubsettingLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionRangeSubsettingLabel(this);
	}
};

CoverageExpressionRangeSubsettingLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionRangeSubsettingLabel(this);
	}
};

CoverageExpressionRangeSubsettingLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionRangeSubsettingLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionTrigonometricLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionTrigonometricLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionTrigonometricLabelContext.prototype.constructor = CoverageExpressionTrigonometricLabelContext;

WCPSParser.CoverageExpressionTrigonometricLabelContext = CoverageExpressionTrigonometricLabelContext;

CoverageExpressionTrigonometricLabelContext.prototype.trigonometricExpression = function() {
    return this.getTypedRuleContext(TrigonometricExpressionContext,0);
};
CoverageExpressionTrigonometricLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionTrigonometricLabel(this);
	}
};

CoverageExpressionTrigonometricLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionTrigonometricLabel(this);
	}
};

CoverageExpressionTrigonometricLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionTrigonometricLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionUnaryBooleanLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionUnaryBooleanLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionUnaryBooleanLabelContext.prototype.constructor = CoverageExpressionUnaryBooleanLabelContext;

WCPSParser.CoverageExpressionUnaryBooleanLabelContext = CoverageExpressionUnaryBooleanLabelContext;

CoverageExpressionUnaryBooleanLabelContext.prototype.unaryBooleanExpression = function() {
    return this.getTypedRuleContext(UnaryBooleanExpressionContext,0);
};
CoverageExpressionUnaryBooleanLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionUnaryBooleanLabel(this);
	}
};

CoverageExpressionUnaryBooleanLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionUnaryBooleanLabel(this);
	}
};

CoverageExpressionUnaryBooleanLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionUnaryBooleanLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionShorthandTrimLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionShorthandTrimLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionShorthandTrimLabelContext.prototype.constructor = CoverageExpressionShorthandTrimLabelContext;

WCPSParser.CoverageExpressionShorthandTrimLabelContext = CoverageExpressionShorthandTrimLabelContext;

CoverageExpressionShorthandTrimLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

CoverageExpressionShorthandTrimLabelContext.prototype.LEFT_BRACKET = function() {
    return this.getToken(WCPSParser.LEFT_BRACKET, 0);
};

CoverageExpressionShorthandTrimLabelContext.prototype.dimensionIntervalList = function() {
    return this.getTypedRuleContext(DimensionIntervalListContext,0);
};

CoverageExpressionShorthandTrimLabelContext.prototype.RIGHT_BRACKET = function() {
    return this.getToken(WCPSParser.RIGHT_BRACKET, 0);
};
CoverageExpressionShorthandTrimLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionShorthandTrimLabel(this);
	}
};

CoverageExpressionShorthandTrimLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionShorthandTrimLabel(this);
	}
};

CoverageExpressionShorthandTrimLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionShorthandTrimLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionVariableNameLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionVariableNameLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionVariableNameLabelContext.prototype.constructor = CoverageExpressionVariableNameLabelContext;

WCPSParser.CoverageExpressionVariableNameLabelContext = CoverageExpressionVariableNameLabelContext;

CoverageExpressionVariableNameLabelContext.prototype.coverageVariableName = function() {
    return this.getTypedRuleContext(CoverageVariableNameContext,0);
};
CoverageExpressionVariableNameLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionVariableNameLabel(this);
	}
};

CoverageExpressionVariableNameLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionVariableNameLabel(this);
	}
};

CoverageExpressionVariableNameLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionVariableNameLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionConstantLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionConstantLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionConstantLabelContext.prototype.constructor = CoverageExpressionConstantLabelContext;

WCPSParser.CoverageExpressionConstantLabelContext = CoverageExpressionConstantLabelContext;

CoverageExpressionConstantLabelContext.prototype.coverageConstantExpression = function() {
    return this.getTypedRuleContext(CoverageConstantExpressionContext,0);
};
CoverageExpressionConstantLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionConstantLabel(this);
	}
};

CoverageExpressionConstantLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionConstantLabel(this);
	}
};

CoverageExpressionConstantLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionConstantLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionCoverageLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionCoverageLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionCoverageLabelContext.prototype.constructor = CoverageExpressionCoverageLabelContext;

WCPSParser.CoverageExpressionCoverageLabelContext = CoverageExpressionCoverageLabelContext;

CoverageExpressionCoverageLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

CoverageExpressionCoverageLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

CoverageExpressionCoverageLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
CoverageExpressionCoverageLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionCoverageLabel(this);
	}
};

CoverageExpressionCoverageLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionCoverageLabel(this);
	}
};

CoverageExpressionCoverageLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionCoverageLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionShorthandSliceLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionShorthandSliceLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionShorthandSliceLabelContext.prototype.constructor = CoverageExpressionShorthandSliceLabelContext;

WCPSParser.CoverageExpressionShorthandSliceLabelContext = CoverageExpressionShorthandSliceLabelContext;

CoverageExpressionShorthandSliceLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

CoverageExpressionShorthandSliceLabelContext.prototype.LEFT_BRACKET = function() {
    return this.getToken(WCPSParser.LEFT_BRACKET, 0);
};

CoverageExpressionShorthandSliceLabelContext.prototype.dimensionPointList = function() {
    return this.getTypedRuleContext(DimensionPointListContext,0);
};

CoverageExpressionShorthandSliceLabelContext.prototype.RIGHT_BRACKET = function() {
    return this.getToken(WCPSParser.RIGHT_BRACKET, 0);
};
CoverageExpressionShorthandSliceLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionShorthandSliceLabel(this);
	}
};

CoverageExpressionShorthandSliceLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionShorthandSliceLabel(this);
	}
};

CoverageExpressionShorthandSliceLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionShorthandSliceLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionScalarLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionScalarLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionScalarLabelContext.prototype.constructor = CoverageExpressionScalarLabelContext;

WCPSParser.CoverageExpressionScalarLabelContext = CoverageExpressionScalarLabelContext;

CoverageExpressionScalarLabelContext.prototype.scalarExpression = function() {
    return this.getTypedRuleContext(ScalarExpressionContext,0);
};
CoverageExpressionScalarLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionScalarLabel(this);
	}
};

CoverageExpressionScalarLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionScalarLabel(this);
	}
};

CoverageExpressionScalarLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionScalarLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionRangeConstructorLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionRangeConstructorLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionRangeConstructorLabelContext.prototype.constructor = CoverageExpressionRangeConstructorLabelContext;

WCPSParser.CoverageExpressionRangeConstructorLabelContext = CoverageExpressionRangeConstructorLabelContext;

CoverageExpressionRangeConstructorLabelContext.prototype.rangeConstructorExpression = function() {
    return this.getTypedRuleContext(RangeConstructorExpressionContext,0);
};
CoverageExpressionRangeConstructorLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionRangeConstructorLabel(this);
	}
};

CoverageExpressionRangeConstructorLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionRangeConstructorLabel(this);
	}
};

CoverageExpressionRangeConstructorLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionRangeConstructorLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionScaleLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionScaleLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionScaleLabelContext.prototype.constructor = CoverageExpressionScaleLabelContext;

WCPSParser.CoverageExpressionScaleLabelContext = CoverageExpressionScaleLabelContext;

CoverageExpressionScaleLabelContext.prototype.SCALE = function() {
    return this.getToken(WCPSParser.SCALE, 0);
};

CoverageExpressionScaleLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

CoverageExpressionScaleLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

CoverageExpressionScaleLabelContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.COMMA);
    } else {
        return this.getToken(WCPSParser.COMMA, i);
    }
};


CoverageExpressionScaleLabelContext.prototype.LEFT_BRACE = function() {
    return this.getToken(WCPSParser.LEFT_BRACE, 0);
};

CoverageExpressionScaleLabelContext.prototype.dimensionIntervalList = function() {
    return this.getTypedRuleContext(DimensionIntervalListContext,0);
};

CoverageExpressionScaleLabelContext.prototype.RIGHT_BRACE = function() {
    return this.getToken(WCPSParser.RIGHT_BRACE, 0);
};

CoverageExpressionScaleLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};

CoverageExpressionScaleLabelContext.prototype.fieldInterpolationList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldInterpolationListContext);
    } else {
        return this.getTypedRuleContext(FieldInterpolationListContext,i);
    }
};
CoverageExpressionScaleLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionScaleLabel(this);
	}
};

CoverageExpressionScaleLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionScaleLabel(this);
	}
};

CoverageExpressionScaleLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionScaleLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionTrimCoverageLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionTrimCoverageLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionTrimCoverageLabelContext.prototype.constructor = CoverageExpressionTrimCoverageLabelContext;

WCPSParser.CoverageExpressionTrimCoverageLabelContext = CoverageExpressionTrimCoverageLabelContext;

CoverageExpressionTrimCoverageLabelContext.prototype.TRIM = function() {
    return this.getToken(WCPSParser.TRIM, 0);
};

CoverageExpressionTrimCoverageLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

CoverageExpressionTrimCoverageLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

CoverageExpressionTrimCoverageLabelContext.prototype.COMMA = function() {
    return this.getToken(WCPSParser.COMMA, 0);
};

CoverageExpressionTrimCoverageLabelContext.prototype.dimensionIntervalList = function() {
    return this.getTypedRuleContext(DimensionIntervalListContext,0);
};

CoverageExpressionTrimCoverageLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
CoverageExpressionTrimCoverageLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionTrimCoverageLabel(this);
	}
};

CoverageExpressionTrimCoverageLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionTrimCoverageLabel(this);
	}
};

CoverageExpressionTrimCoverageLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionTrimCoverageLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionCastLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionCastLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionCastLabelContext.prototype.constructor = CoverageExpressionCastLabelContext;

WCPSParser.CoverageExpressionCastLabelContext = CoverageExpressionCastLabelContext;

CoverageExpressionCastLabelContext.prototype.castExpression = function() {
    return this.getTypedRuleContext(CastExpressionContext,0);
};
CoverageExpressionCastLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionCastLabel(this);
	}
};

CoverageExpressionCastLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionCastLabel(this);
	}
};

CoverageExpressionCastLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionCastLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionArithmeticLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionArithmeticLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionArithmeticLabelContext.prototype.constructor = CoverageExpressionArithmeticLabelContext;

WCPSParser.CoverageExpressionArithmeticLabelContext = CoverageExpressionArithmeticLabelContext;

CoverageExpressionArithmeticLabelContext.prototype.coverageExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoverageExpressionContext);
    } else {
        return this.getTypedRuleContext(CoverageExpressionContext,i);
    }
};

CoverageExpressionArithmeticLabelContext.prototype.coverageArithmeticOperator = function() {
    return this.getTypedRuleContext(CoverageArithmeticOperatorContext,0);
};
CoverageExpressionArithmeticLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionArithmeticLabel(this);
	}
};

CoverageExpressionArithmeticLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionArithmeticLabel(this);
	}
};

CoverageExpressionArithmeticLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionArithmeticLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionOverlayLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionOverlayLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionOverlayLabelContext.prototype.constructor = CoverageExpressionOverlayLabelContext;

WCPSParser.CoverageExpressionOverlayLabelContext = CoverageExpressionOverlayLabelContext;

CoverageExpressionOverlayLabelContext.prototype.coverageExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoverageExpressionContext);
    } else {
        return this.getTypedRuleContext(CoverageExpressionContext,i);
    }
};

CoverageExpressionOverlayLabelContext.prototype.OVERLAY = function() {
    return this.getToken(WCPSParser.OVERLAY, 0);
};
CoverageExpressionOverlayLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionOverlayLabel(this);
	}
};

CoverageExpressionOverlayLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionOverlayLabel(this);
	}
};

CoverageExpressionOverlayLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionOverlayLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionConstructorLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionConstructorLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionConstructorLabelContext.prototype.constructor = CoverageExpressionConstructorLabelContext;

WCPSParser.CoverageExpressionConstructorLabelContext = CoverageExpressionConstructorLabelContext;

CoverageExpressionConstructorLabelContext.prototype.coverageConstructorExpression = function() {
    return this.getTypedRuleContext(CoverageConstructorExpressionContext,0);
};
CoverageExpressionConstructorLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionConstructorLabel(this);
	}
};

CoverageExpressionConstructorLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionConstructorLabel(this);
	}
};

CoverageExpressionConstructorLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionConstructorLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionExponentialLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionExponentialLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionExponentialLabelContext.prototype.constructor = CoverageExpressionExponentialLabelContext;

WCPSParser.CoverageExpressionExponentialLabelContext = CoverageExpressionExponentialLabelContext;

CoverageExpressionExponentialLabelContext.prototype.exponentialExpression = function() {
    return this.getTypedRuleContext(ExponentialExpressionContext,0);
};
CoverageExpressionExponentialLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionExponentialLabel(this);
	}
};

CoverageExpressionExponentialLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionExponentialLabel(this);
	}
};

CoverageExpressionExponentialLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionExponentialLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionCrsTransformLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionCrsTransformLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionCrsTransformLabelContext.prototype.constructor = CoverageExpressionCrsTransformLabelContext;

WCPSParser.CoverageExpressionCrsTransformLabelContext = CoverageExpressionCrsTransformLabelContext;

CoverageExpressionCrsTransformLabelContext.prototype.crsTransformExpression = function() {
    return this.getTypedRuleContext(CrsTransformExpressionContext,0);
};
CoverageExpressionCrsTransformLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionCrsTransformLabel(this);
	}
};

CoverageExpressionCrsTransformLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionCrsTransformLabel(this);
	}
};

CoverageExpressionCrsTransformLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionCrsTransformLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionLogicLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionLogicLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionLogicLabelContext.prototype.constructor = CoverageExpressionLogicLabelContext;

WCPSParser.CoverageExpressionLogicLabelContext = CoverageExpressionLogicLabelContext;

CoverageExpressionLogicLabelContext.prototype.coverageExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoverageExpressionContext);
    } else {
        return this.getTypedRuleContext(CoverageExpressionContext,i);
    }
};

CoverageExpressionLogicLabelContext.prototype.booleanOperator = function() {
    return this.getTypedRuleContext(BooleanOperatorContext,0);
};
CoverageExpressionLogicLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionLogicLabel(this);
	}
};

CoverageExpressionLogicLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionLogicLabel(this);
	}
};

CoverageExpressionLogicLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionLogicLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionComparissonLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionComparissonLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionComparissonLabelContext.prototype.constructor = CoverageExpressionComparissonLabelContext;

WCPSParser.CoverageExpressionComparissonLabelContext = CoverageExpressionComparissonLabelContext;

CoverageExpressionComparissonLabelContext.prototype.coverageExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoverageExpressionContext);
    } else {
        return this.getTypedRuleContext(CoverageExpressionContext,i);
    }
};

CoverageExpressionComparissonLabelContext.prototype.numericalComparissonOperator = function() {
    return this.getTypedRuleContext(NumericalComparissonOperatorContext,0);
};
CoverageExpressionComparissonLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionComparissonLabel(this);
	}
};

CoverageExpressionComparissonLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionComparissonLabel(this);
	}
};

CoverageExpressionComparissonLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionComparissonLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionDecodeLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionDecodeLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionDecodeLabelContext.prototype.constructor = CoverageExpressionDecodeLabelContext;

WCPSParser.CoverageExpressionDecodeLabelContext = CoverageExpressionDecodeLabelContext;

CoverageExpressionDecodeLabelContext.prototype.decodeCoverageExpression = function() {
    return this.getTypedRuleContext(DecodeCoverageExpressionContext,0);
};
CoverageExpressionDecodeLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionDecodeLabel(this);
	}
};

CoverageExpressionDecodeLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionDecodeLabel(this);
	}
};

CoverageExpressionDecodeLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionDecodeLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionExtendLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionExtendLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionExtendLabelContext.prototype.constructor = CoverageExpressionExtendLabelContext;

WCPSParser.CoverageExpressionExtendLabelContext = CoverageExpressionExtendLabelContext;

CoverageExpressionExtendLabelContext.prototype.EXTEND = function() {
    return this.getToken(WCPSParser.EXTEND, 0);
};

CoverageExpressionExtendLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

CoverageExpressionExtendLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

CoverageExpressionExtendLabelContext.prototype.COMMA = function() {
    return this.getToken(WCPSParser.COMMA, 0);
};

CoverageExpressionExtendLabelContext.prototype.LEFT_BRACE = function() {
    return this.getToken(WCPSParser.LEFT_BRACE, 0);
};

CoverageExpressionExtendLabelContext.prototype.dimensionIntervalList = function() {
    return this.getTypedRuleContext(DimensionIntervalListContext,0);
};

CoverageExpressionExtendLabelContext.prototype.RIGHT_BRACE = function() {
    return this.getToken(WCPSParser.RIGHT_BRACE, 0);
};

CoverageExpressionExtendLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
CoverageExpressionExtendLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionExtendLabel(this);
	}
};

CoverageExpressionExtendLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionExtendLabel(this);
	}
};

CoverageExpressionExtendLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionExtendLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionUnaryArithmeticLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionUnaryArithmeticLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionUnaryArithmeticLabelContext.prototype.constructor = CoverageExpressionUnaryArithmeticLabelContext;

WCPSParser.CoverageExpressionUnaryArithmeticLabelContext = CoverageExpressionUnaryArithmeticLabelContext;

CoverageExpressionUnaryArithmeticLabelContext.prototype.unaryArithmeticExpression = function() {
    return this.getTypedRuleContext(UnaryArithmeticExpressionContext,0);
};
CoverageExpressionUnaryArithmeticLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionUnaryArithmeticLabel(this);
	}
};

CoverageExpressionUnaryArithmeticLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionUnaryArithmeticLabel(this);
	}
};

CoverageExpressionUnaryArithmeticLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionUnaryArithmeticLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CoverageExpressionSliceLabelContext(parser, ctx) {
	CoverageExpressionContext.call(this, parser);
    CoverageExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageExpressionSliceLabelContext.prototype = Object.create(CoverageExpressionContext.prototype);
CoverageExpressionSliceLabelContext.prototype.constructor = CoverageExpressionSliceLabelContext;

WCPSParser.CoverageExpressionSliceLabelContext = CoverageExpressionSliceLabelContext;

CoverageExpressionSliceLabelContext.prototype.SLICE = function() {
    return this.getToken(WCPSParser.SLICE, 0);
};

CoverageExpressionSliceLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

CoverageExpressionSliceLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

CoverageExpressionSliceLabelContext.prototype.COMMA = function() {
    return this.getToken(WCPSParser.COMMA, 0);
};

CoverageExpressionSliceLabelContext.prototype.LEFT_BRACE = function() {
    return this.getToken(WCPSParser.LEFT_BRACE, 0);
};

CoverageExpressionSliceLabelContext.prototype.dimensionPointList = function() {
    return this.getTypedRuleContext(DimensionPointListContext,0);
};

CoverageExpressionSliceLabelContext.prototype.RIGHT_BRACE = function() {
    return this.getToken(WCPSParser.RIGHT_BRACE, 0);
};

CoverageExpressionSliceLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
CoverageExpressionSliceLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageExpressionSliceLabel(this);
	}
};

CoverageExpressionSliceLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageExpressionSliceLabel(this);
	}
};

CoverageExpressionSliceLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageExpressionSliceLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.prototype.coverageExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new CoverageExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 52;
    this.enterRecursionRule(localctx, 52, WCPSParser.RULE_coverageExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 366;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CoverageExpressionVariableNameLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 309;
            this.coverageVariableName();
            break;

        case 2:
            localctx = new CoverageExpressionScalarLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 310;
            this.scalarExpression();
            break;

        case 3:
            localctx = new CoverageExpressionConstantLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 311;
            this.coverageConstantExpression();
            break;

        case 4:
            localctx = new CoverageExpressionConstructorLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 312;
            this.coverageConstructorExpression();
            break;

        case 5:
            localctx = new CoverageExpressionDecodeLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 313;
            this.decodeCoverageExpression();
            break;

        case 6:
            localctx = new CoverageExpressionTrimCoverageLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 314;
            this.match(WCPSParser.TRIM);
            this.state = 315;
            this.match(WCPSParser.LEFT_PARANTHESIS);
            this.state = 316;
            this.coverageExpression(0);
            this.state = 317;
            this.match(WCPSParser.COMMA);
            this.state = 318;
            this.dimensionIntervalList();
            this.state = 319;
            this.match(WCPSParser.RIGHT_PARANTHESIS);
            break;

        case 7:
            localctx = new CoverageExpressionSliceLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 321;
            this.match(WCPSParser.SLICE);
            this.state = 322;
            this.match(WCPSParser.LEFT_PARANTHESIS);
            this.state = 323;
            this.coverageExpression(0);
            this.state = 324;
            this.match(WCPSParser.COMMA);
            this.state = 325;
            this.match(WCPSParser.LEFT_BRACE);
            this.state = 326;
            this.dimensionPointList();
            this.state = 327;
            this.match(WCPSParser.RIGHT_BRACE);
            this.state = 328;
            this.match(WCPSParser.RIGHT_PARANTHESIS);
            break;

        case 8:
            localctx = new CoverageExpressionExtendLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 330;
            this.match(WCPSParser.EXTEND);
            this.state = 331;
            this.match(WCPSParser.LEFT_PARANTHESIS);
            this.state = 332;
            this.coverageExpression(0);
            this.state = 333;
            this.match(WCPSParser.COMMA);
            this.state = 334;
            this.match(WCPSParser.LEFT_BRACE);
            this.state = 335;
            this.dimensionIntervalList();
            this.state = 336;
            this.match(WCPSParser.RIGHT_BRACE);
            this.state = 337;
            this.match(WCPSParser.RIGHT_PARANTHESIS);
            break;

        case 9:
            localctx = new CoverageExpressionUnaryArithmeticLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 339;
            this.unaryArithmeticExpression();
            break;

        case 10:
            localctx = new CoverageExpressionTrigonometricLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 340;
            this.trigonometricExpression();
            break;

        case 11:
            localctx = new CoverageExpressionExponentialLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 341;
            this.exponentialExpression();
            break;

        case 12:
            localctx = new CoverageExpressionUnaryBooleanLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 342;
            this.unaryBooleanExpression();
            break;

        case 13:
            localctx = new CoverageExpressionCastLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 343;
            this.castExpression();
            break;

        case 14:
            localctx = new CoverageExpressionRangeConstructorLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 344;
            this.rangeConstructorExpression();
            break;

        case 15:
            localctx = new CoverageExpressionCrsTransformLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 345;
            this.crsTransformExpression();
            break;

        case 16:
            localctx = new CoverageExpressionScaleLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 346;
            this.match(WCPSParser.SCALE);
            this.state = 347;
            this.match(WCPSParser.LEFT_PARANTHESIS);
            this.state = 348;
            this.coverageExpression(0);
            this.state = 349;
            this.match(WCPSParser.COMMA);
            this.state = 350;
            this.match(WCPSParser.LEFT_BRACE);
            this.state = 351;
            this.dimensionIntervalList();
            this.state = 352;
            this.match(WCPSParser.RIGHT_BRACE);
            this.state = 357;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===WCPSParser.COMMA) {
                this.state = 353;
                this.match(WCPSParser.COMMA);
                this.state = 354;
                this.fieldInterpolationList();
                this.state = 359;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 360;
            this.match(WCPSParser.RIGHT_PARANTHESIS);
            break;

        case 17:
            localctx = new CoverageExpressionCoverageLabelContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 362;
            this.match(WCPSParser.LEFT_PARANTHESIS);
            this.state = 363;
            this.coverageExpression(0);
            this.state = 364;
            this.match(WCPSParser.RIGHT_PARANTHESIS);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 398;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 396;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new CoverageExpressionLogicLabelContext(this, new CoverageExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, WCPSParser.RULE_coverageExpression);
                    this.state = 368;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 369;
                    this.booleanOperator();
                    this.state = 370;
                    this.coverageExpression(25);
                    break;

                case 2:
                    localctx = new CoverageExpressionArithmeticLabelContext(this, new CoverageExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, WCPSParser.RULE_coverageExpression);
                    this.state = 372;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 373;
                    this.coverageArithmeticOperator();
                    this.state = 374;
                    this.coverageExpression(24);
                    break;

                case 3:
                    localctx = new CoverageExpressionOverlayLabelContext(this, new CoverageExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, WCPSParser.RULE_coverageExpression);
                    this.state = 376;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 377;
                    this.match(WCPSParser.OVERLAY);
                    this.state = 378;
                    this.coverageExpression(23);
                    break;

                case 4:
                    localctx = new CoverageExpressionComparissonLabelContext(this, new CoverageExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, WCPSParser.RULE_coverageExpression);
                    this.state = 379;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 380;
                    this.numericalComparissonOperator();
                    this.state = 381;
                    this.coverageExpression(22);
                    break;

                case 5:
                    localctx = new CoverageExpressionShorthandTrimLabelContext(this, new CoverageExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, WCPSParser.RULE_coverageExpression);
                    this.state = 383;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 384;
                    this.match(WCPSParser.LEFT_BRACKET);
                    this.state = 385;
                    this.dimensionIntervalList();
                    this.state = 386;
                    this.match(WCPSParser.RIGHT_BRACKET);
                    break;

                case 6:
                    localctx = new CoverageExpressionShorthandSliceLabelContext(this, new CoverageExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, WCPSParser.RULE_coverageExpression);
                    this.state = 388;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 389;
                    this.match(WCPSParser.LEFT_BRACKET);
                    this.state = 390;
                    this.dimensionPointList();
                    this.state = 391;
                    this.match(WCPSParser.RIGHT_BRACKET);
                    break;

                case 7:
                    localctx = new CoverageExpressionRangeSubsettingLabelContext(this, new CoverageExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, WCPSParser.RULE_coverageExpression);
                    this.state = 393;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 394;
                    this.match(WCPSParser.DOT);
                    this.state = 395;
                    this.fieldName();
                    break;

                } 
            }
            this.state = 400;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function CoverageArithmeticOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_coverageArithmeticOperator;
    return this;
}

CoverageArithmeticOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoverageArithmeticOperatorContext.prototype.constructor = CoverageArithmeticOperatorContext;

CoverageArithmeticOperatorContext.prototype.PLUS = function() {
    return this.getToken(WCPSParser.PLUS, 0);
};

CoverageArithmeticOperatorContext.prototype.MULTIPLICATION = function() {
    return this.getToken(WCPSParser.MULTIPLICATION, 0);
};

CoverageArithmeticOperatorContext.prototype.DIVISION = function() {
    return this.getToken(WCPSParser.DIVISION, 0);
};

CoverageArithmeticOperatorContext.prototype.MINUS = function() {
    return this.getToken(WCPSParser.MINUS, 0);
};

CoverageArithmeticOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageArithmeticOperator(this);
	}
};

CoverageArithmeticOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageArithmeticOperator(this);
	}
};

CoverageArithmeticOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageArithmeticOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.CoverageArithmeticOperatorContext = CoverageArithmeticOperatorContext;

WCPSParser.prototype.coverageArithmeticOperator = function() {

    var localctx = new CoverageArithmeticOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, WCPSParser.RULE_coverageArithmeticOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 401;
        _la = this._input.LA(1);
        if(!(_la===WCPSParser.DIVISION || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (WCPSParser.MINUS - 54)) | (1 << (WCPSParser.MULTIPLICATION - 54)) | (1 << (WCPSParser.PLUS - 54)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryArithmeticExpressionOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_unaryArithmeticExpressionOperator;
    return this;
}

UnaryArithmeticExpressionOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryArithmeticExpressionOperatorContext.prototype.constructor = UnaryArithmeticExpressionOperatorContext;

UnaryArithmeticExpressionOperatorContext.prototype.PLUS = function() {
    return this.getToken(WCPSParser.PLUS, 0);
};

UnaryArithmeticExpressionOperatorContext.prototype.MINUS = function() {
    return this.getToken(WCPSParser.MINUS, 0);
};

UnaryArithmeticExpressionOperatorContext.prototype.ABSOLUTE_VALUE = function() {
    return this.getToken(WCPSParser.ABSOLUTE_VALUE, 0);
};

UnaryArithmeticExpressionOperatorContext.prototype.SQUARE_ROOT = function() {
    return this.getToken(WCPSParser.SQUARE_ROOT, 0);
};

UnaryArithmeticExpressionOperatorContext.prototype.REAL_PART = function() {
    return this.getToken(WCPSParser.REAL_PART, 0);
};

UnaryArithmeticExpressionOperatorContext.prototype.IMAGINARY_PART = function() {
    return this.getToken(WCPSParser.IMAGINARY_PART, 0);
};

UnaryArithmeticExpressionOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterUnaryArithmeticExpressionOperator(this);
	}
};

UnaryArithmeticExpressionOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitUnaryArithmeticExpressionOperator(this);
	}
};

UnaryArithmeticExpressionOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitUnaryArithmeticExpressionOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.UnaryArithmeticExpressionOperatorContext = UnaryArithmeticExpressionOperatorContext;

WCPSParser.prototype.unaryArithmeticExpressionOperator = function() {

    var localctx = new UnaryArithmeticExpressionOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, WCPSParser.RULE_unaryArithmeticExpressionOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 403;
        _la = this._input.LA(1);
        if(!(_la===WCPSParser.ABSOLUTE_VALUE || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (WCPSParser.IMAGINARY_PART - 37)) | (1 << (WCPSParser.MINUS - 37)) | (1 << (WCPSParser.PLUS - 37)) | (1 << (WCPSParser.REAL_PART - 37)))) !== 0) || _la===WCPSParser.SQUARE_ROOT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryArithmeticExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_unaryArithmeticExpression;
    return this;
}

UnaryArithmeticExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryArithmeticExpressionContext.prototype.constructor = UnaryArithmeticExpressionContext;


 
UnaryArithmeticExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function UnaryCoverageArithmeticExpressionLabelContext(parser, ctx) {
	UnaryArithmeticExpressionContext.call(this, parser);
    UnaryArithmeticExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryCoverageArithmeticExpressionLabelContext.prototype = Object.create(UnaryArithmeticExpressionContext.prototype);
UnaryCoverageArithmeticExpressionLabelContext.prototype.constructor = UnaryCoverageArithmeticExpressionLabelContext;

WCPSParser.UnaryCoverageArithmeticExpressionLabelContext = UnaryCoverageArithmeticExpressionLabelContext;

UnaryCoverageArithmeticExpressionLabelContext.prototype.unaryArithmeticExpressionOperator = function() {
    return this.getTypedRuleContext(UnaryArithmeticExpressionOperatorContext,0);
};

UnaryCoverageArithmeticExpressionLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

UnaryCoverageArithmeticExpressionLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

UnaryCoverageArithmeticExpressionLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
UnaryCoverageArithmeticExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterUnaryCoverageArithmeticExpressionLabel(this);
	}
};

UnaryCoverageArithmeticExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitUnaryCoverageArithmeticExpressionLabel(this);
	}
};

UnaryCoverageArithmeticExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitUnaryCoverageArithmeticExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.UnaryArithmeticExpressionContext = UnaryArithmeticExpressionContext;

WCPSParser.prototype.unaryArithmeticExpression = function() {

    var localctx = new UnaryArithmeticExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, WCPSParser.RULE_unaryArithmeticExpression);
    try {
        localctx = new UnaryCoverageArithmeticExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 405;
        this.unaryArithmeticExpressionOperator();
        this.state = 406;
        this.match(WCPSParser.LEFT_PARANTHESIS);
        this.state = 407;
        this.coverageExpression(0);
        this.state = 408;
        this.match(WCPSParser.RIGHT_PARANTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TrigonometricExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_trigonometricExpression;
    return this;
}

TrigonometricExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrigonometricExpressionContext.prototype.constructor = TrigonometricExpressionContext;


 
TrigonometricExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TrigonometricExpressionLabelContext(parser, ctx) {
	TrigonometricExpressionContext.call(this, parser);
    TrigonometricExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TrigonometricExpressionLabelContext.prototype = Object.create(TrigonometricExpressionContext.prototype);
TrigonometricExpressionLabelContext.prototype.constructor = TrigonometricExpressionLabelContext;

WCPSParser.TrigonometricExpressionLabelContext = TrigonometricExpressionLabelContext;

TrigonometricExpressionLabelContext.prototype.trigonometricOperator = function() {
    return this.getTypedRuleContext(TrigonometricOperatorContext,0);
};

TrigonometricExpressionLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

TrigonometricExpressionLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

TrigonometricExpressionLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
TrigonometricExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterTrigonometricExpressionLabel(this);
	}
};

TrigonometricExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitTrigonometricExpressionLabel(this);
	}
};

TrigonometricExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitTrigonometricExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.TrigonometricExpressionContext = TrigonometricExpressionContext;

WCPSParser.prototype.trigonometricExpression = function() {

    var localctx = new TrigonometricExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, WCPSParser.RULE_trigonometricExpression);
    try {
        localctx = new TrigonometricExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 410;
        this.trigonometricOperator();
        this.state = 411;
        this.match(WCPSParser.LEFT_PARANTHESIS);
        this.state = 412;
        this.coverageExpression(0);
        this.state = 413;
        this.match(WCPSParser.RIGHT_PARANTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExponentialExpressionOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_exponentialExpressionOperator;
    return this;
}

ExponentialExpressionOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExponentialExpressionOperatorContext.prototype.constructor = ExponentialExpressionOperatorContext;

ExponentialExpressionOperatorContext.prototype.EXP = function() {
    return this.getToken(WCPSParser.EXP, 0);
};

ExponentialExpressionOperatorContext.prototype.LOG = function() {
    return this.getToken(WCPSParser.LOG, 0);
};

ExponentialExpressionOperatorContext.prototype.LN = function() {
    return this.getToken(WCPSParser.LN, 0);
};

ExponentialExpressionOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterExponentialExpressionOperator(this);
	}
};

ExponentialExpressionOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitExponentialExpressionOperator(this);
	}
};

ExponentialExpressionOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitExponentialExpressionOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.ExponentialExpressionOperatorContext = ExponentialExpressionOperatorContext;

WCPSParser.prototype.exponentialExpressionOperator = function() {

    var localctx = new ExponentialExpressionOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, WCPSParser.RULE_exponentialExpressionOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 415;
        _la = this._input.LA(1);
        if(!(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (WCPSParser.EXP - 31)) | (1 << (WCPSParser.LN - 31)) | (1 << (WCPSParser.LOG - 31)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExponentialExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_exponentialExpression;
    return this;
}

ExponentialExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExponentialExpressionContext.prototype.constructor = ExponentialExpressionContext;


 
ExponentialExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ExponentialExpressionLabelContext(parser, ctx) {
	ExponentialExpressionContext.call(this, parser);
    ExponentialExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExponentialExpressionLabelContext.prototype = Object.create(ExponentialExpressionContext.prototype);
ExponentialExpressionLabelContext.prototype.constructor = ExponentialExpressionLabelContext;

WCPSParser.ExponentialExpressionLabelContext = ExponentialExpressionLabelContext;

ExponentialExpressionLabelContext.prototype.exponentialExpressionOperator = function() {
    return this.getTypedRuleContext(ExponentialExpressionOperatorContext,0);
};

ExponentialExpressionLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

ExponentialExpressionLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

ExponentialExpressionLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
ExponentialExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterExponentialExpressionLabel(this);
	}
};

ExponentialExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitExponentialExpressionLabel(this);
	}
};

ExponentialExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitExponentialExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.ExponentialExpressionContext = ExponentialExpressionContext;

WCPSParser.prototype.exponentialExpression = function() {

    var localctx = new ExponentialExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, WCPSParser.RULE_exponentialExpression);
    try {
        localctx = new ExponentialExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 417;
        this.exponentialExpressionOperator();
        this.state = 418;
        this.match(WCPSParser.LEFT_PARANTHESIS);
        this.state = 419;
        this.coverageExpression(0);
        this.state = 420;
        this.match(WCPSParser.RIGHT_PARANTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryBooleanExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_unaryBooleanExpression;
    return this;
}

UnaryBooleanExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryBooleanExpressionContext.prototype.constructor = UnaryBooleanExpressionContext;


 
UnaryBooleanExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function NotUnaryBooleanExpressionLabelContext(parser, ctx) {
	UnaryBooleanExpressionContext.call(this, parser);
    UnaryBooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NotUnaryBooleanExpressionLabelContext.prototype = Object.create(UnaryBooleanExpressionContext.prototype);
NotUnaryBooleanExpressionLabelContext.prototype.constructor = NotUnaryBooleanExpressionLabelContext;

WCPSParser.NotUnaryBooleanExpressionLabelContext = NotUnaryBooleanExpressionLabelContext;

NotUnaryBooleanExpressionLabelContext.prototype.NOT = function() {
    return this.getToken(WCPSParser.NOT, 0);
};

NotUnaryBooleanExpressionLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

NotUnaryBooleanExpressionLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

NotUnaryBooleanExpressionLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
NotUnaryBooleanExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterNotUnaryBooleanExpressionLabel(this);
	}
};

NotUnaryBooleanExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitNotUnaryBooleanExpressionLabel(this);
	}
};

NotUnaryBooleanExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitNotUnaryBooleanExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BitUnaryBooleanExpressionLabelContext(parser, ctx) {
	UnaryBooleanExpressionContext.call(this, parser);
    UnaryBooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BitUnaryBooleanExpressionLabelContext.prototype = Object.create(UnaryBooleanExpressionContext.prototype);
BitUnaryBooleanExpressionLabelContext.prototype.constructor = BitUnaryBooleanExpressionLabelContext;

WCPSParser.BitUnaryBooleanExpressionLabelContext = BitUnaryBooleanExpressionLabelContext;

BitUnaryBooleanExpressionLabelContext.prototype.BIT = function() {
    return this.getToken(WCPSParser.BIT, 0);
};

BitUnaryBooleanExpressionLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

BitUnaryBooleanExpressionLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

BitUnaryBooleanExpressionLabelContext.prototype.COMMA = function() {
    return this.getToken(WCPSParser.COMMA, 0);
};

BitUnaryBooleanExpressionLabelContext.prototype.numericalScalarExpression = function() {
    return this.getTypedRuleContext(NumericalScalarExpressionContext,0);
};

BitUnaryBooleanExpressionLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
BitUnaryBooleanExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterBitUnaryBooleanExpressionLabel(this);
	}
};

BitUnaryBooleanExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitBitUnaryBooleanExpressionLabel(this);
	}
};

BitUnaryBooleanExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitBitUnaryBooleanExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.UnaryBooleanExpressionContext = UnaryBooleanExpressionContext;

WCPSParser.prototype.unaryBooleanExpression = function() {

    var localctx = new UnaryBooleanExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, WCPSParser.RULE_unaryBooleanExpression);
    try {
        this.state = 434;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WCPSParser.NOT:
            localctx = new NotUnaryBooleanExpressionLabelContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 422;
            this.match(WCPSParser.NOT);
            this.state = 423;
            this.match(WCPSParser.LEFT_PARANTHESIS);
            this.state = 424;
            this.coverageExpression(0);
            this.state = 425;
            this.match(WCPSParser.RIGHT_PARANTHESIS);
            break;
        case WCPSParser.BIT:
            localctx = new BitUnaryBooleanExpressionLabelContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 427;
            this.match(WCPSParser.BIT);
            this.state = 428;
            this.match(WCPSParser.LEFT_PARANTHESIS);
            this.state = 429;
            this.coverageExpression(0);
            this.state = 430;
            this.match(WCPSParser.COMMA);
            this.state = 431;
            this.numericalScalarExpression(0);
            this.state = 432;
            this.match(WCPSParser.RIGHT_PARANTHESIS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RangeTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_rangeType;
    return this;
}

RangeTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RangeTypeContext.prototype.constructor = RangeTypeContext;

RangeTypeContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

RangeTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterRangeType(this);
	}
};

RangeTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitRangeType(this);
	}
};

RangeTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitRangeType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.RangeTypeContext = RangeTypeContext;

WCPSParser.prototype.rangeType = function() {

    var localctx = new RangeTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, WCPSParser.RULE_rangeType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 436;
        this.identifier();
        this.state = 440;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (WCPSParser.SIMPLE_IDENTIFIER - 90)) | (1 << (WCPSParser.SIMPLE_IDENTIFIER_WITH_NUMBERS - 90)) | (1 << (WCPSParser.IDENTIFIER - 90)))) !== 0)) {
            this.state = 437;
            this.identifier();
            this.state = 442;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CastExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_castExpression;
    return this;
}

CastExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;


 
CastExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CastExpressionLabelContext(parser, ctx) {
	CastExpressionContext.call(this, parser);
    CastExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CastExpressionLabelContext.prototype = Object.create(CastExpressionContext.prototype);
CastExpressionLabelContext.prototype.constructor = CastExpressionLabelContext;

WCPSParser.CastExpressionLabelContext = CastExpressionLabelContext;

CastExpressionLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

CastExpressionLabelContext.prototype.rangeType = function() {
    return this.getTypedRuleContext(RangeTypeContext,0);
};

CastExpressionLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};

CastExpressionLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};
CastExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCastExpressionLabel(this);
	}
};

CastExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCastExpressionLabel(this);
	}
};

CastExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCastExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.CastExpressionContext = CastExpressionContext;

WCPSParser.prototype.castExpression = function() {

    var localctx = new CastExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, WCPSParser.RULE_castExpression);
    try {
        localctx = new CastExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 443;
        this.match(WCPSParser.LEFT_PARANTHESIS);
        this.state = 444;
        this.rangeType();
        this.state = 445;
        this.match(WCPSParser.RIGHT_PARANTHESIS);
        this.state = 446;
        this.coverageExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_fieldName;
    return this;
}

FieldNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldNameContext.prototype.constructor = FieldNameContext;

FieldNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FieldNameContext.prototype.REAL_NUMBER_CONSTANT = function() {
    return this.getToken(WCPSParser.REAL_NUMBER_CONSTANT, 0);
};

FieldNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterFieldName(this);
	}
};

FieldNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitFieldName(this);
	}
};

FieldNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitFieldName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.FieldNameContext = FieldNameContext;

WCPSParser.prototype.fieldName = function() {

    var localctx = new FieldNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, WCPSParser.RULE_fieldName);
    try {
        this.state = 450;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WCPSParser.SIMPLE_IDENTIFIER:
        case WCPSParser.SIMPLE_IDENTIFIER_WITH_NUMBERS:
        case WCPSParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 448;
            this.identifier();
            break;
        case WCPSParser.REAL_NUMBER_CONSTANT:
            this.enterOuterAlt(localctx, 2);
            this.state = 449;
            this.match(WCPSParser.REAL_NUMBER_CONSTANT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RangeConstructorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_rangeConstructorExpression;
    return this;
}

RangeConstructorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RangeConstructorExpressionContext.prototype.constructor = RangeConstructorExpressionContext;


 
RangeConstructorExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function RangeConstructorExpressionLabelContext(parser, ctx) {
	RangeConstructorExpressionContext.call(this, parser);
    RangeConstructorExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RangeConstructorExpressionLabelContext.prototype = Object.create(RangeConstructorExpressionContext.prototype);
RangeConstructorExpressionLabelContext.prototype.constructor = RangeConstructorExpressionLabelContext;

WCPSParser.RangeConstructorExpressionLabelContext = RangeConstructorExpressionLabelContext;

RangeConstructorExpressionLabelContext.prototype.LEFT_BRACE = function() {
    return this.getToken(WCPSParser.LEFT_BRACE, 0);
};

RangeConstructorExpressionLabelContext.prototype.RIGHT_BRACE = function() {
    return this.getToken(WCPSParser.RIGHT_BRACE, 0);
};

RangeConstructorExpressionLabelContext.prototype.fieldName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldNameContext);
    } else {
        return this.getTypedRuleContext(FieldNameContext,i);
    }
};

RangeConstructorExpressionLabelContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.COLON);
    } else {
        return this.getToken(WCPSParser.COLON, i);
    }
};


RangeConstructorExpressionLabelContext.prototype.coverageExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoverageExpressionContext);
    } else {
        return this.getTypedRuleContext(CoverageExpressionContext,i);
    }
};

RangeConstructorExpressionLabelContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.SEMICOLON);
    } else {
        return this.getToken(WCPSParser.SEMICOLON, i);
    }
};

RangeConstructorExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterRangeConstructorExpressionLabel(this);
	}
};

RangeConstructorExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitRangeConstructorExpressionLabel(this);
	}
};

RangeConstructorExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitRangeConstructorExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.RangeConstructorExpressionContext = RangeConstructorExpressionContext;

WCPSParser.prototype.rangeConstructorExpression = function() {

    var localctx = new RangeConstructorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, WCPSParser.RULE_rangeConstructorExpression);
    var _la = 0; // Token type
    try {
        localctx = new RangeConstructorExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 452;
        this.match(WCPSParser.LEFT_BRACE);

        this.state = 453;
        this.fieldName();
        this.state = 454;
        this.match(WCPSParser.COLON);
        this.state = 455;
        this.coverageExpression(0);
        this.state = 464;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WCPSParser.SEMICOLON) {
            this.state = 457;
            this.match(WCPSParser.SEMICOLON);
            this.state = 458;
            this.fieldName();
            this.state = 459;
            this.match(WCPSParser.COLON);
            this.state = 460;
            this.coverageExpression(0);
            this.state = 466;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 467;
        this.match(WCPSParser.RIGHT_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CrsTransformExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_crsTransformExpression;
    return this;
}

CrsTransformExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CrsTransformExpressionContext.prototype.constructor = CrsTransformExpressionContext;


 
CrsTransformExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CrsTransformExpressionLabelContext(parser, ctx) {
	CrsTransformExpressionContext.call(this, parser);
    CrsTransformExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CrsTransformExpressionLabelContext.prototype = Object.create(CrsTransformExpressionContext.prototype);
CrsTransformExpressionLabelContext.prototype.constructor = CrsTransformExpressionLabelContext;

WCPSParser.CrsTransformExpressionLabelContext = CrsTransformExpressionLabelContext;

CrsTransformExpressionLabelContext.prototype.CRS_TRANSFORM = function() {
    return this.getToken(WCPSParser.CRS_TRANSFORM, 0);
};

CrsTransformExpressionLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

CrsTransformExpressionLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

CrsTransformExpressionLabelContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.COMMA);
    } else {
        return this.getToken(WCPSParser.COMMA, i);
    }
};


CrsTransformExpressionLabelContext.prototype.dimensionCrsList = function() {
    return this.getTypedRuleContext(DimensionCrsListContext,0);
};

CrsTransformExpressionLabelContext.prototype.fieldInterpolationList = function() {
    return this.getTypedRuleContext(FieldInterpolationListContext,0);
};

CrsTransformExpressionLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
CrsTransformExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCrsTransformExpressionLabel(this);
	}
};

CrsTransformExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCrsTransformExpressionLabel(this);
	}
};

CrsTransformExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCrsTransformExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.CrsTransformExpressionContext = CrsTransformExpressionContext;

WCPSParser.prototype.crsTransformExpression = function() {

    var localctx = new CrsTransformExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, WCPSParser.RULE_crsTransformExpression);
    try {
        localctx = new CrsTransformExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 469;
        this.match(WCPSParser.CRS_TRANSFORM);
        this.state = 470;
        this.match(WCPSParser.LEFT_PARANTHESIS);
        this.state = 471;
        this.coverageExpression(0);
        this.state = 472;
        this.match(WCPSParser.COMMA);
        this.state = 473;
        this.dimensionCrsList();
        this.state = 474;
        this.match(WCPSParser.COMMA);
        this.state = 475;
        this.fieldInterpolationList();
        this.state = 476;
        this.match(WCPSParser.RIGHT_PARANTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DimensionPointListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_dimensionPointList;
    return this;
}

DimensionPointListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DimensionPointListContext.prototype.constructor = DimensionPointListContext;


 
DimensionPointListContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DimensionPointListLabelContext(parser, ctx) {
	DimensionPointListContext.call(this, parser);
    DimensionPointListContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DimensionPointListLabelContext.prototype = Object.create(DimensionPointListContext.prototype);
DimensionPointListLabelContext.prototype.constructor = DimensionPointListLabelContext;

WCPSParser.DimensionPointListLabelContext = DimensionPointListLabelContext;

DimensionPointListLabelContext.prototype.dimensionPointElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DimensionPointElementContext);
    } else {
        return this.getTypedRuleContext(DimensionPointElementContext,i);
    }
};

DimensionPointListLabelContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.COMMA);
    } else {
        return this.getToken(WCPSParser.COMMA, i);
    }
};

DimensionPointListLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterDimensionPointListLabel(this);
	}
};

DimensionPointListLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitDimensionPointListLabel(this);
	}
};

DimensionPointListLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitDimensionPointListLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.DimensionPointListContext = DimensionPointListContext;

WCPSParser.prototype.dimensionPointList = function() {

    var localctx = new DimensionPointListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, WCPSParser.RULE_dimensionPointList);
    var _la = 0; // Token type
    try {
        localctx = new DimensionPointListLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 478;
        this.dimensionPointElement();
        this.state = 483;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WCPSParser.COMMA) {
            this.state = 479;
            this.match(WCPSParser.COMMA);
            this.state = 480;
            this.dimensionPointElement();
            this.state = 485;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DimensionPointElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_dimensionPointElement;
    return this;
}

DimensionPointElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DimensionPointElementContext.prototype.constructor = DimensionPointElementContext;


 
DimensionPointElementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DimensionPointElementLabelContext(parser, ctx) {
	DimensionPointElementContext.call(this, parser);
    DimensionPointElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DimensionPointElementLabelContext.prototype = Object.create(DimensionPointElementContext.prototype);
DimensionPointElementLabelContext.prototype.constructor = DimensionPointElementLabelContext;

WCPSParser.DimensionPointElementLabelContext = DimensionPointElementLabelContext;

DimensionPointElementLabelContext.prototype.axisName = function() {
    return this.getTypedRuleContext(AxisNameContext,0);
};

DimensionPointElementLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

DimensionPointElementLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

DimensionPointElementLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};

DimensionPointElementLabelContext.prototype.COLON = function() {
    return this.getToken(WCPSParser.COLON, 0);
};

DimensionPointElementLabelContext.prototype.crsName = function() {
    return this.getTypedRuleContext(CrsNameContext,0);
};
DimensionPointElementLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterDimensionPointElementLabel(this);
	}
};

DimensionPointElementLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitDimensionPointElementLabel(this);
	}
};

DimensionPointElementLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitDimensionPointElementLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.DimensionPointElementContext = DimensionPointElementContext;

WCPSParser.prototype.dimensionPointElement = function() {

    var localctx = new DimensionPointElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, WCPSParser.RULE_dimensionPointElement);
    var _la = 0; // Token type
    try {
        localctx = new DimensionPointElementLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 486;
        this.axisName();
        this.state = 489;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WCPSParser.COLON) {
            this.state = 487;
            this.match(WCPSParser.COLON);
            this.state = 488;
            this.crsName();
        }

        this.state = 491;
        this.match(WCPSParser.LEFT_PARANTHESIS);
        this.state = 492;
        this.coverageExpression(0);
        this.state = 493;
        this.match(WCPSParser.RIGHT_PARANTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DimensionIntervalListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_dimensionIntervalList;
    return this;
}

DimensionIntervalListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DimensionIntervalListContext.prototype.constructor = DimensionIntervalListContext;


 
DimensionIntervalListContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DimensionIntervalListLabelContext(parser, ctx) {
	DimensionIntervalListContext.call(this, parser);
    DimensionIntervalListContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DimensionIntervalListLabelContext.prototype = Object.create(DimensionIntervalListContext.prototype);
DimensionIntervalListLabelContext.prototype.constructor = DimensionIntervalListLabelContext;

WCPSParser.DimensionIntervalListLabelContext = DimensionIntervalListLabelContext;

DimensionIntervalListLabelContext.prototype.dimensionIntervalElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DimensionIntervalElementContext);
    } else {
        return this.getTypedRuleContext(DimensionIntervalElementContext,i);
    }
};

DimensionIntervalListLabelContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.COMMA);
    } else {
        return this.getToken(WCPSParser.COMMA, i);
    }
};

DimensionIntervalListLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterDimensionIntervalListLabel(this);
	}
};

DimensionIntervalListLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitDimensionIntervalListLabel(this);
	}
};

DimensionIntervalListLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitDimensionIntervalListLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.DimensionIntervalListContext = DimensionIntervalListContext;

WCPSParser.prototype.dimensionIntervalList = function() {

    var localctx = new DimensionIntervalListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, WCPSParser.RULE_dimensionIntervalList);
    var _la = 0; // Token type
    try {
        localctx = new DimensionIntervalListLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 495;
        this.dimensionIntervalElement();
        this.state = 500;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WCPSParser.COMMA) {
            this.state = 496;
            this.match(WCPSParser.COMMA);
            this.state = 497;
            this.dimensionIntervalElement();
            this.state = 502;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DimensionIntervalElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_dimensionIntervalElement;
    return this;
}

DimensionIntervalElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DimensionIntervalElementContext.prototype.constructor = DimensionIntervalElementContext;


 
DimensionIntervalElementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SliceDimensionIntervalElementLabelContext(parser, ctx) {
	DimensionIntervalElementContext.call(this, parser);
    DimensionIntervalElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SliceDimensionIntervalElementLabelContext.prototype = Object.create(DimensionIntervalElementContext.prototype);
SliceDimensionIntervalElementLabelContext.prototype.constructor = SliceDimensionIntervalElementLabelContext;

WCPSParser.SliceDimensionIntervalElementLabelContext = SliceDimensionIntervalElementLabelContext;

SliceDimensionIntervalElementLabelContext.prototype.axisName = function() {
    return this.getTypedRuleContext(AxisNameContext,0);
};

SliceDimensionIntervalElementLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

SliceDimensionIntervalElementLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

SliceDimensionIntervalElementLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};

SliceDimensionIntervalElementLabelContext.prototype.COLON = function() {
    return this.getToken(WCPSParser.COLON, 0);
};

SliceDimensionIntervalElementLabelContext.prototype.crsName = function() {
    return this.getTypedRuleContext(CrsNameContext,0);
};
SliceDimensionIntervalElementLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterSliceDimensionIntervalElementLabel(this);
	}
};

SliceDimensionIntervalElementLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitSliceDimensionIntervalElementLabel(this);
	}
};

SliceDimensionIntervalElementLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitSliceDimensionIntervalElementLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TrimDimensionIntervalElementLabelContext(parser, ctx) {
	DimensionIntervalElementContext.call(this, parser);
    DimensionIntervalElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TrimDimensionIntervalElementLabelContext.prototype = Object.create(DimensionIntervalElementContext.prototype);
TrimDimensionIntervalElementLabelContext.prototype.constructor = TrimDimensionIntervalElementLabelContext;

WCPSParser.TrimDimensionIntervalElementLabelContext = TrimDimensionIntervalElementLabelContext;

TrimDimensionIntervalElementLabelContext.prototype.axisName = function() {
    return this.getTypedRuleContext(AxisNameContext,0);
};

TrimDimensionIntervalElementLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

TrimDimensionIntervalElementLabelContext.prototype.coverageExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CoverageExpressionContext);
    } else {
        return this.getTypedRuleContext(CoverageExpressionContext,i);
    }
};

TrimDimensionIntervalElementLabelContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.COLON);
    } else {
        return this.getToken(WCPSParser.COLON, i);
    }
};


TrimDimensionIntervalElementLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};

TrimDimensionIntervalElementLabelContext.prototype.crsName = function() {
    return this.getTypedRuleContext(CrsNameContext,0);
};
TrimDimensionIntervalElementLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterTrimDimensionIntervalElementLabel(this);
	}
};

TrimDimensionIntervalElementLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitTrimDimensionIntervalElementLabel(this);
	}
};

TrimDimensionIntervalElementLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitTrimDimensionIntervalElementLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.DimensionIntervalElementContext = DimensionIntervalElementContext;

WCPSParser.prototype.dimensionIntervalElement = function() {

    var localctx = new DimensionIntervalElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, WCPSParser.RULE_dimensionIntervalElement);
    var _la = 0; // Token type
    try {
        this.state = 523;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TrimDimensionIntervalElementLabelContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 503;
            this.axisName();
            this.state = 506;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WCPSParser.COLON) {
                this.state = 504;
                this.match(WCPSParser.COLON);
                this.state = 505;
                this.crsName();
            }

            this.state = 508;
            this.match(WCPSParser.LEFT_PARANTHESIS);
            this.state = 509;
            this.coverageExpression(0);
            this.state = 510;
            this.match(WCPSParser.COLON);
            this.state = 511;
            this.coverageExpression(0);
            this.state = 512;
            this.match(WCPSParser.RIGHT_PARANTHESIS);
            break;

        case 2:
            localctx = new SliceDimensionIntervalElementLabelContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 514;
            this.axisName();
            this.state = 517;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===WCPSParser.COLON) {
                this.state = 515;
                this.match(WCPSParser.COLON);
                this.state = 516;
                this.crsName();
            }

            this.state = 519;
            this.match(WCPSParser.LEFT_PARANTHESIS);
            this.state = 520;
            this.coverageExpression(0);
            this.state = 521;
            this.match(WCPSParser.RIGHT_PARANTHESIS);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DimensionCrsListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_dimensionCrsList;
    return this;
}

DimensionCrsListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DimensionCrsListContext.prototype.constructor = DimensionCrsListContext;


 
DimensionCrsListContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DimensionCrsListLabelContext(parser, ctx) {
	DimensionCrsListContext.call(this, parser);
    DimensionCrsListContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DimensionCrsListLabelContext.prototype = Object.create(DimensionCrsListContext.prototype);
DimensionCrsListLabelContext.prototype.constructor = DimensionCrsListLabelContext;

WCPSParser.DimensionCrsListLabelContext = DimensionCrsListLabelContext;

DimensionCrsListLabelContext.prototype.LEFT_BRACE = function() {
    return this.getToken(WCPSParser.LEFT_BRACE, 0);
};

DimensionCrsListLabelContext.prototype.dimensionCrsElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DimensionCrsElementContext);
    } else {
        return this.getTypedRuleContext(DimensionCrsElementContext,i);
    }
};

DimensionCrsListLabelContext.prototype.RIGHT_BRACE = function() {
    return this.getToken(WCPSParser.RIGHT_BRACE, 0);
};

DimensionCrsListLabelContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.COMMA);
    } else {
        return this.getToken(WCPSParser.COMMA, i);
    }
};

DimensionCrsListLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterDimensionCrsListLabel(this);
	}
};

DimensionCrsListLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitDimensionCrsListLabel(this);
	}
};

DimensionCrsListLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitDimensionCrsListLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.DimensionCrsListContext = DimensionCrsListContext;

WCPSParser.prototype.dimensionCrsList = function() {

    var localctx = new DimensionCrsListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, WCPSParser.RULE_dimensionCrsList);
    var _la = 0; // Token type
    try {
        localctx = new DimensionCrsListLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 525;
        this.match(WCPSParser.LEFT_BRACE);
        this.state = 526;
        this.dimensionCrsElement();
        this.state = 531;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WCPSParser.COMMA) {
            this.state = 527;
            this.match(WCPSParser.COMMA);
            this.state = 528;
            this.dimensionCrsElement();
            this.state = 533;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 534;
        this.match(WCPSParser.RIGHT_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DimensionCrsElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_dimensionCrsElement;
    return this;
}

DimensionCrsElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DimensionCrsElementContext.prototype.constructor = DimensionCrsElementContext;


 
DimensionCrsElementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DimensionCrsElementLabelContext(parser, ctx) {
	DimensionCrsElementContext.call(this, parser);
    DimensionCrsElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DimensionCrsElementLabelContext.prototype = Object.create(DimensionCrsElementContext.prototype);
DimensionCrsElementLabelContext.prototype.constructor = DimensionCrsElementLabelContext;

WCPSParser.DimensionCrsElementLabelContext = DimensionCrsElementLabelContext;

DimensionCrsElementLabelContext.prototype.axisName = function() {
    return this.getTypedRuleContext(AxisNameContext,0);
};

DimensionCrsElementLabelContext.prototype.COLON = function() {
    return this.getToken(WCPSParser.COLON, 0);
};

DimensionCrsElementLabelContext.prototype.crsName = function() {
    return this.getTypedRuleContext(CrsNameContext,0);
};
DimensionCrsElementLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterDimensionCrsElementLabel(this);
	}
};

DimensionCrsElementLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitDimensionCrsElementLabel(this);
	}
};

DimensionCrsElementLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitDimensionCrsElementLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.DimensionCrsElementContext = DimensionCrsElementContext;

WCPSParser.prototype.dimensionCrsElement = function() {

    var localctx = new DimensionCrsElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, WCPSParser.RULE_dimensionCrsElement);
    try {
        localctx = new DimensionCrsElementLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 536;
        this.axisName();
        this.state = 537;
        this.match(WCPSParser.COLON);
        this.state = 538;
        this.crsName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldInterpolationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_fieldInterpolationList;
    return this;
}

FieldInterpolationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldInterpolationListContext.prototype.constructor = FieldInterpolationListContext;


 
FieldInterpolationListContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FieldInterpolationListLabelContext(parser, ctx) {
	FieldInterpolationListContext.call(this, parser);
    FieldInterpolationListContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldInterpolationListLabelContext.prototype = Object.create(FieldInterpolationListContext.prototype);
FieldInterpolationListLabelContext.prototype.constructor = FieldInterpolationListLabelContext;

WCPSParser.FieldInterpolationListLabelContext = FieldInterpolationListLabelContext;

FieldInterpolationListLabelContext.prototype.LEFT_BRACE = function() {
    return this.getToken(WCPSParser.LEFT_BRACE, 0);
};

FieldInterpolationListLabelContext.prototype.fieldInterpolationListElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldInterpolationListElementContext);
    } else {
        return this.getTypedRuleContext(FieldInterpolationListElementContext,i);
    }
};

FieldInterpolationListLabelContext.prototype.RIGHT_BRACE = function() {
    return this.getToken(WCPSParser.RIGHT_BRACE, 0);
};

FieldInterpolationListLabelContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.COMMA);
    } else {
        return this.getToken(WCPSParser.COMMA, i);
    }
};

FieldInterpolationListLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterFieldInterpolationListLabel(this);
	}
};

FieldInterpolationListLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitFieldInterpolationListLabel(this);
	}
};

FieldInterpolationListLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitFieldInterpolationListLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.FieldInterpolationListContext = FieldInterpolationListContext;

WCPSParser.prototype.fieldInterpolationList = function() {

    var localctx = new FieldInterpolationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, WCPSParser.RULE_fieldInterpolationList);
    var _la = 0; // Token type
    try {
        localctx = new FieldInterpolationListLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 540;
        this.match(WCPSParser.LEFT_BRACE);
        this.state = 541;
        this.fieldInterpolationListElement();
        this.state = 546;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WCPSParser.COMMA) {
            this.state = 542;
            this.match(WCPSParser.COMMA);
            this.state = 543;
            this.fieldInterpolationListElement();
            this.state = 548;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 549;
        this.match(WCPSParser.RIGHT_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldInterpolationListElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_fieldInterpolationListElement;
    return this;
}

FieldInterpolationListElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldInterpolationListElementContext.prototype.constructor = FieldInterpolationListElementContext;


 
FieldInterpolationListElementContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FieldInterpolationListElementLabelContext(parser, ctx) {
	FieldInterpolationListElementContext.call(this, parser);
    FieldInterpolationListElementContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldInterpolationListElementLabelContext.prototype = Object.create(FieldInterpolationListElementContext.prototype);
FieldInterpolationListElementLabelContext.prototype.constructor = FieldInterpolationListElementLabelContext;

WCPSParser.FieldInterpolationListElementLabelContext = FieldInterpolationListElementLabelContext;

FieldInterpolationListElementLabelContext.prototype.fieldName = function() {
    return this.getTypedRuleContext(FieldNameContext,0);
};

FieldInterpolationListElementLabelContext.prototype.interpolationMethod = function() {
    return this.getTypedRuleContext(InterpolationMethodContext,0);
};
FieldInterpolationListElementLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterFieldInterpolationListElementLabel(this);
	}
};

FieldInterpolationListElementLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitFieldInterpolationListElementLabel(this);
	}
};

FieldInterpolationListElementLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitFieldInterpolationListElementLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.FieldInterpolationListElementContext = FieldInterpolationListElementContext;

WCPSParser.prototype.fieldInterpolationListElement = function() {

    var localctx = new FieldInterpolationListElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, WCPSParser.RULE_fieldInterpolationListElement);
    try {
        localctx = new FieldInterpolationListElementLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 551;
        this.fieldName();
        this.state = 552;
        this.interpolationMethod();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterpolationMethodContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_interpolationMethod;
    return this;
}

InterpolationMethodContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterpolationMethodContext.prototype.constructor = InterpolationMethodContext;


 
InterpolationMethodContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function InterpolationMethodLabelContext(parser, ctx) {
	InterpolationMethodContext.call(this, parser);
    InterpolationMethodContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InterpolationMethodLabelContext.prototype = Object.create(InterpolationMethodContext.prototype);
InterpolationMethodLabelContext.prototype.constructor = InterpolationMethodLabelContext;

WCPSParser.InterpolationMethodLabelContext = InterpolationMethodLabelContext;

InterpolationMethodLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

InterpolationMethodLabelContext.prototype.interpolationType = function() {
    return this.getTypedRuleContext(InterpolationTypeContext,0);
};

InterpolationMethodLabelContext.prototype.COLON = function() {
    return this.getToken(WCPSParser.COLON, 0);
};

InterpolationMethodLabelContext.prototype.nullResistance = function() {
    return this.getTypedRuleContext(NullResistanceContext,0);
};

InterpolationMethodLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
InterpolationMethodLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterInterpolationMethodLabel(this);
	}
};

InterpolationMethodLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitInterpolationMethodLabel(this);
	}
};

InterpolationMethodLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitInterpolationMethodLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.InterpolationMethodContext = InterpolationMethodContext;

WCPSParser.prototype.interpolationMethod = function() {

    var localctx = new InterpolationMethodContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, WCPSParser.RULE_interpolationMethod);
    try {
        localctx = new InterpolationMethodLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 554;
        this.match(WCPSParser.LEFT_PARANTHESIS);
        this.state = 555;
        this.interpolationType();
        this.state = 556;
        this.match(WCPSParser.COLON);
        this.state = 557;
        this.nullResistance();
        this.state = 558;
        this.match(WCPSParser.RIGHT_PARANTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NullResistanceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_nullResistance;
    return this;
}

NullResistanceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NullResistanceContext.prototype.constructor = NullResistanceContext;

NullResistanceContext.prototype.TRUE = function() {
    return this.getToken(WCPSParser.TRUE, 0);
};

NullResistanceContext.prototype.FALSE = function() {
    return this.getToken(WCPSParser.FALSE, 0);
};

NullResistanceContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterNullResistance(this);
	}
};

NullResistanceContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitNullResistance(this);
	}
};

NullResistanceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitNullResistance(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.NullResistanceContext = NullResistanceContext;

WCPSParser.prototype.nullResistance = function() {

    var localctx = new NullResistanceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, WCPSParser.RULE_nullResistance);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 560;
        _la = this._input.LA(1);
        if(!(_la===WCPSParser.FALSE || _la===WCPSParser.TRUE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterpolationTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_interpolationType;
    return this;
}

InterpolationTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterpolationTypeContext.prototype.constructor = InterpolationTypeContext;


 
InterpolationTypeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function InterpolationTypeLabelContext(parser, ctx) {
	InterpolationTypeContext.call(this, parser);
    InterpolationTypeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InterpolationTypeLabelContext.prototype = Object.create(InterpolationTypeContext.prototype);
InterpolationTypeLabelContext.prototype.constructor = InterpolationTypeLabelContext;

WCPSParser.InterpolationTypeLabelContext = InterpolationTypeLabelContext;

InterpolationTypeLabelContext.prototype.STRING_LITERAL = function() {
    return this.getToken(WCPSParser.STRING_LITERAL, 0);
};
InterpolationTypeLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterInterpolationTypeLabel(this);
	}
};

InterpolationTypeLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitInterpolationTypeLabel(this);
	}
};

InterpolationTypeLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitInterpolationTypeLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.InterpolationTypeContext = InterpolationTypeContext;

WCPSParser.prototype.interpolationType = function() {

    var localctx = new InterpolationTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, WCPSParser.RULE_interpolationType);
    try {
        localctx = new InterpolationTypeLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 562;
        this.match(WCPSParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoverageConstructorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_coverageConstructorExpression;
    return this;
}

CoverageConstructorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoverageConstructorExpressionContext.prototype.constructor = CoverageConstructorExpressionContext;


 
CoverageConstructorExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CoverageConstructorExpressionLabelContext(parser, ctx) {
	CoverageConstructorExpressionContext.call(this, parser);
    CoverageConstructorExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageConstructorExpressionLabelContext.prototype = Object.create(CoverageConstructorExpressionContext.prototype);
CoverageConstructorExpressionLabelContext.prototype.constructor = CoverageConstructorExpressionLabelContext;

WCPSParser.CoverageConstructorExpressionLabelContext = CoverageConstructorExpressionLabelContext;

CoverageConstructorExpressionLabelContext.prototype.COVERAGE = function() {
    return this.getToken(WCPSParser.COVERAGE, 0);
};

CoverageConstructorExpressionLabelContext.prototype.OVER = function() {
    return this.getToken(WCPSParser.OVER, 0);
};

CoverageConstructorExpressionLabelContext.prototype.axisIterator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AxisIteratorContext);
    } else {
        return this.getTypedRuleContext(AxisIteratorContext,i);
    }
};

CoverageConstructorExpressionLabelContext.prototype.VALUES = function() {
    return this.getToken(WCPSParser.VALUES, 0);
};

CoverageConstructorExpressionLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

CoverageConstructorExpressionLabelContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CoverageConstructorExpressionLabelContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.COMMA);
    } else {
        return this.getToken(WCPSParser.COMMA, i);
    }
};

CoverageConstructorExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageConstructorExpressionLabel(this);
	}
};

CoverageConstructorExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageConstructorExpressionLabel(this);
	}
};

CoverageConstructorExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageConstructorExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.CoverageConstructorExpressionContext = CoverageConstructorExpressionContext;

WCPSParser.prototype.coverageConstructorExpression = function() {

    var localctx = new CoverageConstructorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, WCPSParser.RULE_coverageConstructorExpression);
    var _la = 0; // Token type
    try {
        localctx = new CoverageConstructorExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 564;
        this.match(WCPSParser.COVERAGE);

        this.state = 565;
        this.identifier();
        this.state = 566;
        this.match(WCPSParser.OVER);
        this.state = 567;
        this.axisIterator();
        this.state = 572;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WCPSParser.COMMA) {
            this.state = 568;
            this.match(WCPSParser.COMMA);
            this.state = 569;
            this.axisIterator();
            this.state = 574;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 575;
        this.match(WCPSParser.VALUES);
        this.state = 576;
        this.coverageExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AxisIteratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_axisIterator;
    return this;
}

AxisIteratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AxisIteratorContext.prototype.constructor = AxisIteratorContext;


 
AxisIteratorContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AxisIteratorLabelContext(parser, ctx) {
	AxisIteratorContext.call(this, parser);
    AxisIteratorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AxisIteratorLabelContext.prototype = Object.create(AxisIteratorContext.prototype);
AxisIteratorLabelContext.prototype.constructor = AxisIteratorLabelContext;

WCPSParser.AxisIteratorLabelContext = AxisIteratorLabelContext;

AxisIteratorLabelContext.prototype.coverageVariableName = function() {
    return this.getTypedRuleContext(CoverageVariableNameContext,0);
};

AxisIteratorLabelContext.prototype.dimensionIntervalElement = function() {
    return this.getTypedRuleContext(DimensionIntervalElementContext,0);
};
AxisIteratorLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterAxisIteratorLabel(this);
	}
};

AxisIteratorLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitAxisIteratorLabel(this);
	}
};

AxisIteratorLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitAxisIteratorLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.AxisIteratorContext = AxisIteratorContext;

WCPSParser.prototype.axisIterator = function() {

    var localctx = new AxisIteratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, WCPSParser.RULE_axisIterator);
    try {
        localctx = new AxisIteratorLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 578;
        this.coverageVariableName();
        this.state = 579;
        this.dimensionIntervalElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntervalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_intervalExpression;
    return this;
}

IntervalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalExpressionContext.prototype.constructor = IntervalExpressionContext;


 
IntervalExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function IntervalExpressionLabelContext(parser, ctx) {
	IntervalExpressionContext.call(this, parser);
    IntervalExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IntervalExpressionLabelContext.prototype = Object.create(IntervalExpressionContext.prototype);
IntervalExpressionLabelContext.prototype.constructor = IntervalExpressionLabelContext;

WCPSParser.IntervalExpressionLabelContext = IntervalExpressionLabelContext;

IntervalExpressionLabelContext.prototype.scalarExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ScalarExpressionContext);
    } else {
        return this.getTypedRuleContext(ScalarExpressionContext,i);
    }
};

IntervalExpressionLabelContext.prototype.COLON = function() {
    return this.getToken(WCPSParser.COLON, 0);
};
IntervalExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterIntervalExpressionLabel(this);
	}
};

IntervalExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitIntervalExpressionLabel(this);
	}
};

IntervalExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitIntervalExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CRSIntervalExpressionLabelContext(parser, ctx) {
	IntervalExpressionContext.call(this, parser);
    IntervalExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CRSIntervalExpressionLabelContext.prototype = Object.create(IntervalExpressionContext.prototype);
CRSIntervalExpressionLabelContext.prototype.constructor = CRSIntervalExpressionLabelContext;

WCPSParser.CRSIntervalExpressionLabelContext = CRSIntervalExpressionLabelContext;

CRSIntervalExpressionLabelContext.prototype.IMGCRSDOMAIN = function() {
    return this.getToken(WCPSParser.IMGCRSDOMAIN, 0);
};

CRSIntervalExpressionLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

CRSIntervalExpressionLabelContext.prototype.coverageVariableName = function() {
    return this.getTypedRuleContext(CoverageVariableNameContext,0);
};

CRSIntervalExpressionLabelContext.prototype.COMMA = function() {
    return this.getToken(WCPSParser.COMMA, 0);
};

CRSIntervalExpressionLabelContext.prototype.axisName = function() {
    return this.getTypedRuleContext(AxisNameContext,0);
};

CRSIntervalExpressionLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
CRSIntervalExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCRSIntervalExpressionLabel(this);
	}
};

CRSIntervalExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCRSIntervalExpressionLabel(this);
	}
};

CRSIntervalExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCRSIntervalExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.IntervalExpressionContext = IntervalExpressionContext;

WCPSParser.prototype.intervalExpression = function() {

    var localctx = new IntervalExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, WCPSParser.RULE_intervalExpression);
    try {
        this.state = 592;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WCPSParser.ABSOLUTE_VALUE:
        case WCPSParser.ADD:
        case WCPSParser.ALL:
        case WCPSParser.ARCSIN:
        case WCPSParser.ARCCOS:
        case WCPSParser.ARCTAN:
        case WCPSParser.AVG:
        case WCPSParser.CONDENSE:
        case WCPSParser.COS:
        case WCPSParser.COSH:
        case WCPSParser.COUNT:
        case WCPSParser.DESCRIBE_COVERAGE:
        case WCPSParser.FALSE:
        case WCPSParser.IMAGINARY_PART:
        case WCPSParser.ID:
        case WCPSParser.LEFT_PARANTHESIS:
        case WCPSParser.MAX:
        case WCPSParser.MIN:
        case WCPSParser.MINUS:
        case WCPSParser.MULTIPLICATION:
        case WCPSParser.NOT:
        case WCPSParser.PLUS:
        case WCPSParser.REAL_PART:
        case WCPSParser.ROUND:
        case WCPSParser.SIN:
        case WCPSParser.SINH:
        case WCPSParser.SOME:
        case WCPSParser.SQUARE_ROOT:
        case WCPSParser.TAN:
        case WCPSParser.TANH:
        case WCPSParser.TRUE:
        case WCPSParser.REAL_NUMBER_CONSTANT:
        case WCPSParser.STRING_LITERAL:
            localctx = new IntervalExpressionLabelContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 581;
            this.scalarExpression();
            this.state = 582;
            this.match(WCPSParser.COLON);
            this.state = 583;
            this.scalarExpression();
            break;
        case WCPSParser.IMGCRSDOMAIN:
            localctx = new CRSIntervalExpressionLabelContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 585;
            this.match(WCPSParser.IMGCRSDOMAIN);
            this.state = 586;
            this.match(WCPSParser.LEFT_PARANTHESIS);
            this.state = 587;
            this.coverageVariableName();
            this.state = 588;
            this.match(WCPSParser.COMMA);
            this.state = 589;
            this.axisName();
            this.state = 590;
            this.match(WCPSParser.RIGHT_PARANTHESIS);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CoverageConstantExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_coverageConstantExpression;
    return this;
}

CoverageConstantExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CoverageConstantExpressionContext.prototype.constructor = CoverageConstantExpressionContext;


 
CoverageConstantExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CoverageConstantExpressionLabelContext(parser, ctx) {
	CoverageConstantExpressionContext.call(this, parser);
    CoverageConstantExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CoverageConstantExpressionLabelContext.prototype = Object.create(CoverageConstantExpressionContext.prototype);
CoverageConstantExpressionLabelContext.prototype.constructor = CoverageConstantExpressionLabelContext;

WCPSParser.CoverageConstantExpressionLabelContext = CoverageConstantExpressionLabelContext;

CoverageConstantExpressionLabelContext.prototype.COVERAGE = function() {
    return this.getToken(WCPSParser.COVERAGE, 0);
};

CoverageConstantExpressionLabelContext.prototype.OVER = function() {
    return this.getToken(WCPSParser.OVER, 0);
};

CoverageConstantExpressionLabelContext.prototype.axisIterator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AxisIteratorContext);
    } else {
        return this.getTypedRuleContext(AxisIteratorContext,i);
    }
};

CoverageConstantExpressionLabelContext.prototype.VALUE = function() {
    return this.getToken(WCPSParser.VALUE, 0);
};

CoverageConstantExpressionLabelContext.prototype.LIST = function() {
    return this.getToken(WCPSParser.LIST, 0);
};

CoverageConstantExpressionLabelContext.prototype.LOWER_THAN = function() {
    return this.getToken(WCPSParser.LOWER_THAN, 0);
};

CoverageConstantExpressionLabelContext.prototype.constant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantContext);
    } else {
        return this.getTypedRuleContext(ConstantContext,i);
    }
};

CoverageConstantExpressionLabelContext.prototype.GREATER_THAN = function() {
    return this.getToken(WCPSParser.GREATER_THAN, 0);
};

CoverageConstantExpressionLabelContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CoverageConstantExpressionLabelContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.COMMA);
    } else {
        return this.getToken(WCPSParser.COMMA, i);
    }
};


CoverageConstantExpressionLabelContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.SEMICOLON);
    } else {
        return this.getToken(WCPSParser.SEMICOLON, i);
    }
};

CoverageConstantExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCoverageConstantExpressionLabel(this);
	}
};

CoverageConstantExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCoverageConstantExpressionLabel(this);
	}
};

CoverageConstantExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCoverageConstantExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.CoverageConstantExpressionContext = CoverageConstantExpressionContext;

WCPSParser.prototype.coverageConstantExpression = function() {

    var localctx = new CoverageConstantExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, WCPSParser.RULE_coverageConstantExpression);
    var _la = 0; // Token type
    try {
        localctx = new CoverageConstantExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 594;
        this.match(WCPSParser.COVERAGE);

        this.state = 595;
        this.identifier();
        this.state = 596;
        this.match(WCPSParser.OVER);
        this.state = 597;
        this.axisIterator();
        this.state = 602;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WCPSParser.COMMA) {
            this.state = 598;
            this.match(WCPSParser.COMMA);
            this.state = 599;
            this.axisIterator();
            this.state = 604;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 605;
        this.match(WCPSParser.VALUE);
        this.state = 606;
        this.match(WCPSParser.LIST);
        this.state = 607;
        this.match(WCPSParser.LOWER_THAN);
        this.state = 608;
        this.constant();
        this.state = 613;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WCPSParser.SEMICOLON) {
            this.state = 609;
            this.match(WCPSParser.SEMICOLON);
            this.state = 610;
            this.constant();
            this.state = 615;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 616;
        this.match(WCPSParser.GREATER_THAN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AxisSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_axisSpec;
    return this;
}

AxisSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AxisSpecContext.prototype.constructor = AxisSpecContext;


 
AxisSpecContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AxisSpecLabelContext(parser, ctx) {
	AxisSpecContext.call(this, parser);
    AxisSpecContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AxisSpecLabelContext.prototype = Object.create(AxisSpecContext.prototype);
AxisSpecLabelContext.prototype.constructor = AxisSpecLabelContext;

WCPSParser.AxisSpecLabelContext = AxisSpecLabelContext;

AxisSpecLabelContext.prototype.dimensionIntervalElement = function() {
    return this.getTypedRuleContext(DimensionIntervalElementContext,0);
};
AxisSpecLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterAxisSpecLabel(this);
	}
};

AxisSpecLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitAxisSpecLabel(this);
	}
};

AxisSpecLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitAxisSpecLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.AxisSpecContext = AxisSpecContext;

WCPSParser.prototype.axisSpec = function() {

    var localctx = new AxisSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, WCPSParser.RULE_axisSpec);
    try {
        localctx = new AxisSpecLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 618;
        this.dimensionIntervalElement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CondenseExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_condenseExpression;
    return this;
}

CondenseExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CondenseExpressionContext.prototype.constructor = CondenseExpressionContext;

CondenseExpressionContext.prototype.reduceExpression = function() {
    return this.getTypedRuleContext(ReduceExpressionContext,0);
};

CondenseExpressionContext.prototype.generalCondenseExpression = function() {
    return this.getTypedRuleContext(GeneralCondenseExpressionContext,0);
};

CondenseExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCondenseExpression(this);
	}
};

CondenseExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCondenseExpression(this);
	}
};

CondenseExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCondenseExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.CondenseExpressionContext = CondenseExpressionContext;

WCPSParser.prototype.condenseExpression = function() {

    var localctx = new CondenseExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, WCPSParser.RULE_condenseExpression);
    try {
        this.state = 622;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WCPSParser.ADD:
        case WCPSParser.ALL:
        case WCPSParser.AVG:
        case WCPSParser.COUNT:
        case WCPSParser.MAX:
        case WCPSParser.MIN:
        case WCPSParser.SOME:
            this.enterOuterAlt(localctx, 1);
            this.state = 620;
            this.reduceExpression();
            break;
        case WCPSParser.CONDENSE:
            this.enterOuterAlt(localctx, 2);
            this.state = 621;
            this.generalCondenseExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReduceBooleanExpressionOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_reduceBooleanExpressionOperator;
    return this;
}

ReduceBooleanExpressionOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReduceBooleanExpressionOperatorContext.prototype.constructor = ReduceBooleanExpressionOperatorContext;

ReduceBooleanExpressionOperatorContext.prototype.ALL = function() {
    return this.getToken(WCPSParser.ALL, 0);
};

ReduceBooleanExpressionOperatorContext.prototype.SOME = function() {
    return this.getToken(WCPSParser.SOME, 0);
};

ReduceBooleanExpressionOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterReduceBooleanExpressionOperator(this);
	}
};

ReduceBooleanExpressionOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitReduceBooleanExpressionOperator(this);
	}
};

ReduceBooleanExpressionOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitReduceBooleanExpressionOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.ReduceBooleanExpressionOperatorContext = ReduceBooleanExpressionOperatorContext;

WCPSParser.prototype.reduceBooleanExpressionOperator = function() {

    var localctx = new ReduceBooleanExpressionOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, WCPSParser.RULE_reduceBooleanExpressionOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 624;
        _la = this._input.LA(1);
        if(!(_la===WCPSParser.ALL || _la===WCPSParser.SOME)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReduceNumericalExpressionOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_reduceNumericalExpressionOperator;
    return this;
}

ReduceNumericalExpressionOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReduceNumericalExpressionOperatorContext.prototype.constructor = ReduceNumericalExpressionOperatorContext;

ReduceNumericalExpressionOperatorContext.prototype.COUNT = function() {
    return this.getToken(WCPSParser.COUNT, 0);
};

ReduceNumericalExpressionOperatorContext.prototype.ADD = function() {
    return this.getToken(WCPSParser.ADD, 0);
};

ReduceNumericalExpressionOperatorContext.prototype.AVG = function() {
    return this.getToken(WCPSParser.AVG, 0);
};

ReduceNumericalExpressionOperatorContext.prototype.MIN = function() {
    return this.getToken(WCPSParser.MIN, 0);
};

ReduceNumericalExpressionOperatorContext.prototype.MAX = function() {
    return this.getToken(WCPSParser.MAX, 0);
};

ReduceNumericalExpressionOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterReduceNumericalExpressionOperator(this);
	}
};

ReduceNumericalExpressionOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitReduceNumericalExpressionOperator(this);
	}
};

ReduceNumericalExpressionOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitReduceNumericalExpressionOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.ReduceNumericalExpressionOperatorContext = ReduceNumericalExpressionOperatorContext;

WCPSParser.prototype.reduceNumericalExpressionOperator = function() {

    var localctx = new ReduceNumericalExpressionOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, WCPSParser.RULE_reduceNumericalExpressionOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 626;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << WCPSParser.ADD) | (1 << WCPSParser.AVG) | (1 << WCPSParser.COUNT))) !== 0) || _la===WCPSParser.MAX || _la===WCPSParser.MIN)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReduceBooleanExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_reduceBooleanExpression;
    return this;
}

ReduceBooleanExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReduceBooleanExpressionContext.prototype.constructor = ReduceBooleanExpressionContext;


 
ReduceBooleanExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ReduceBooleanExpressionLabelContext(parser, ctx) {
	ReduceBooleanExpressionContext.call(this, parser);
    ReduceBooleanExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReduceBooleanExpressionLabelContext.prototype = Object.create(ReduceBooleanExpressionContext.prototype);
ReduceBooleanExpressionLabelContext.prototype.constructor = ReduceBooleanExpressionLabelContext;

WCPSParser.ReduceBooleanExpressionLabelContext = ReduceBooleanExpressionLabelContext;

ReduceBooleanExpressionLabelContext.prototype.reduceBooleanExpressionOperator = function() {
    return this.getTypedRuleContext(ReduceBooleanExpressionOperatorContext,0);
};

ReduceBooleanExpressionLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

ReduceBooleanExpressionLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

ReduceBooleanExpressionLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
ReduceBooleanExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterReduceBooleanExpressionLabel(this);
	}
};

ReduceBooleanExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitReduceBooleanExpressionLabel(this);
	}
};

ReduceBooleanExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitReduceBooleanExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.ReduceBooleanExpressionContext = ReduceBooleanExpressionContext;

WCPSParser.prototype.reduceBooleanExpression = function() {

    var localctx = new ReduceBooleanExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, WCPSParser.RULE_reduceBooleanExpression);
    try {
        localctx = new ReduceBooleanExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 628;
        this.reduceBooleanExpressionOperator();
        this.state = 629;
        this.match(WCPSParser.LEFT_PARANTHESIS);
        this.state = 630;
        this.coverageExpression(0);
        this.state = 631;
        this.match(WCPSParser.RIGHT_PARANTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReduceNumericalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_reduceNumericalExpression;
    return this;
}

ReduceNumericalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReduceNumericalExpressionContext.prototype.constructor = ReduceNumericalExpressionContext;


 
ReduceNumericalExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ReduceNumericalExpressionLabelContext(parser, ctx) {
	ReduceNumericalExpressionContext.call(this, parser);
    ReduceNumericalExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReduceNumericalExpressionLabelContext.prototype = Object.create(ReduceNumericalExpressionContext.prototype);
ReduceNumericalExpressionLabelContext.prototype.constructor = ReduceNumericalExpressionLabelContext;

WCPSParser.ReduceNumericalExpressionLabelContext = ReduceNumericalExpressionLabelContext;

ReduceNumericalExpressionLabelContext.prototype.reduceNumericalExpressionOperator = function() {
    return this.getTypedRuleContext(ReduceNumericalExpressionOperatorContext,0);
};

ReduceNumericalExpressionLabelContext.prototype.LEFT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.LEFT_PARANTHESIS, 0);
};

ReduceNumericalExpressionLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

ReduceNumericalExpressionLabelContext.prototype.RIGHT_PARANTHESIS = function() {
    return this.getToken(WCPSParser.RIGHT_PARANTHESIS, 0);
};
ReduceNumericalExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterReduceNumericalExpressionLabel(this);
	}
};

ReduceNumericalExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitReduceNumericalExpressionLabel(this);
	}
};

ReduceNumericalExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitReduceNumericalExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.ReduceNumericalExpressionContext = ReduceNumericalExpressionContext;

WCPSParser.prototype.reduceNumericalExpression = function() {

    var localctx = new ReduceNumericalExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, WCPSParser.RULE_reduceNumericalExpression);
    try {
        localctx = new ReduceNumericalExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 633;
        this.reduceNumericalExpressionOperator();
        this.state = 634;
        this.match(WCPSParser.LEFT_PARANTHESIS);
        this.state = 635;
        this.coverageExpression(0);
        this.state = 636;
        this.match(WCPSParser.RIGHT_PARANTHESIS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReduceExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_reduceExpression;
    return this;
}

ReduceExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReduceExpressionContext.prototype.constructor = ReduceExpressionContext;

ReduceExpressionContext.prototype.reduceBooleanExpression = function() {
    return this.getTypedRuleContext(ReduceBooleanExpressionContext,0);
};

ReduceExpressionContext.prototype.reduceNumericalExpression = function() {
    return this.getTypedRuleContext(ReduceNumericalExpressionContext,0);
};

ReduceExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterReduceExpression(this);
	}
};

ReduceExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitReduceExpression(this);
	}
};

ReduceExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitReduceExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.ReduceExpressionContext = ReduceExpressionContext;

WCPSParser.prototype.reduceExpression = function() {

    var localctx = new ReduceExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, WCPSParser.RULE_reduceExpression);
    try {
        this.state = 640;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WCPSParser.ALL:
        case WCPSParser.SOME:
            this.enterOuterAlt(localctx, 1);
            this.state = 638;
            this.reduceBooleanExpression();
            break;
        case WCPSParser.ADD:
        case WCPSParser.AVG:
        case WCPSParser.COUNT:
        case WCPSParser.MAX:
        case WCPSParser.MIN:
            this.enterOuterAlt(localctx, 2);
            this.state = 639;
            this.reduceNumericalExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CondenseExpressionOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_condenseExpressionOperator;
    return this;
}

CondenseExpressionOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CondenseExpressionOperatorContext.prototype.constructor = CondenseExpressionOperatorContext;

CondenseExpressionOperatorContext.prototype.PLUS = function() {
    return this.getToken(WCPSParser.PLUS, 0);
};

CondenseExpressionOperatorContext.prototype.MULTIPLICATION = function() {
    return this.getToken(WCPSParser.MULTIPLICATION, 0);
};

CondenseExpressionOperatorContext.prototype.MIN = function() {
    return this.getToken(WCPSParser.MIN, 0);
};

CondenseExpressionOperatorContext.prototype.MAX = function() {
    return this.getToken(WCPSParser.MAX, 0);
};

CondenseExpressionOperatorContext.prototype.AND = function() {
    return this.getToken(WCPSParser.AND, 0);
};

CondenseExpressionOperatorContext.prototype.OR = function() {
    return this.getToken(WCPSParser.OR, 0);
};

CondenseExpressionOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCondenseExpressionOperator(this);
	}
};

CondenseExpressionOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCondenseExpressionOperator(this);
	}
};

CondenseExpressionOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCondenseExpressionOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.CondenseExpressionOperatorContext = CondenseExpressionOperatorContext;

WCPSParser.prototype.condenseExpressionOperator = function() {

    var localctx = new CondenseExpressionOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, WCPSParser.RULE_condenseExpressionOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 642;
        _la = this._input.LA(1);
        if(!(_la===WCPSParser.AND || ((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (WCPSParser.MAX - 51)) | (1 << (WCPSParser.MIN - 51)) | (1 << (WCPSParser.MULTIPLICATION - 51)) | (1 << (WCPSParser.OR - 51)) | (1 << (WCPSParser.PLUS - 51)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GeneralCondenseExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_generalCondenseExpression;
    return this;
}

GeneralCondenseExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GeneralCondenseExpressionContext.prototype.constructor = GeneralCondenseExpressionContext;


 
GeneralCondenseExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function GeneralCondenseExpressionLabelContext(parser, ctx) {
	GeneralCondenseExpressionContext.call(this, parser);
    GeneralCondenseExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

GeneralCondenseExpressionLabelContext.prototype = Object.create(GeneralCondenseExpressionContext.prototype);
GeneralCondenseExpressionLabelContext.prototype.constructor = GeneralCondenseExpressionLabelContext;

WCPSParser.GeneralCondenseExpressionLabelContext = GeneralCondenseExpressionLabelContext;

GeneralCondenseExpressionLabelContext.prototype.CONDENSE = function() {
    return this.getToken(WCPSParser.CONDENSE, 0);
};

GeneralCondenseExpressionLabelContext.prototype.condenseExpressionOperator = function() {
    return this.getTypedRuleContext(CondenseExpressionOperatorContext,0);
};

GeneralCondenseExpressionLabelContext.prototype.OVER = function() {
    return this.getToken(WCPSParser.OVER, 0);
};

GeneralCondenseExpressionLabelContext.prototype.axisIterator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AxisIteratorContext);
    } else {
        return this.getTypedRuleContext(AxisIteratorContext,i);
    }
};

GeneralCondenseExpressionLabelContext.prototype.USING = function() {
    return this.getToken(WCPSParser.USING, 0);
};

GeneralCondenseExpressionLabelContext.prototype.coverageExpression = function() {
    return this.getTypedRuleContext(CoverageExpressionContext,0);
};

GeneralCondenseExpressionLabelContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(WCPSParser.COMMA);
    } else {
        return this.getToken(WCPSParser.COMMA, i);
    }
};


GeneralCondenseExpressionLabelContext.prototype.WHERE = function() {
    return this.getToken(WCPSParser.WHERE, 0);
};

GeneralCondenseExpressionLabelContext.prototype.booleanScalarExpression = function() {
    return this.getTypedRuleContext(BooleanScalarExpressionContext,0);
};
GeneralCondenseExpressionLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterGeneralCondenseExpressionLabel(this);
	}
};

GeneralCondenseExpressionLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitGeneralCondenseExpressionLabel(this);
	}
};

GeneralCondenseExpressionLabelContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitGeneralCondenseExpressionLabel(this);
    } else {
        return visitor.visitChildren(this);
    }
};



WCPSParser.GeneralCondenseExpressionContext = GeneralCondenseExpressionContext;

WCPSParser.prototype.generalCondenseExpression = function() {

    var localctx = new GeneralCondenseExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, WCPSParser.RULE_generalCondenseExpression);
    var _la = 0; // Token type
    try {
        localctx = new GeneralCondenseExpressionLabelContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 644;
        this.match(WCPSParser.CONDENSE);
        this.state = 645;
        this.condenseExpressionOperator();
        this.state = 646;
        this.match(WCPSParser.OVER);
        this.state = 647;
        this.axisIterator();
        this.state = 652;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===WCPSParser.COMMA) {
            this.state = 648;
            this.match(WCPSParser.COMMA);
            this.state = 649;
            this.axisIterator();
            this.state = 654;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 657;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===WCPSParser.WHERE) {
            this.state = 655;
            this.match(WCPSParser.WHERE);
            this.state = 656;
            this.booleanScalarExpression(0);
        }

        this.state = 659;
        this.match(WCPSParser.USING);
        this.state = 660;
        this.coverageExpression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CrsNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_crsName;
    return this;
}

CrsNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CrsNameContext.prototype.constructor = CrsNameContext;

CrsNameContext.prototype.STRING_LITERAL = function() {
    return this.getToken(WCPSParser.STRING_LITERAL, 0);
};

CrsNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterCrsName(this);
	}
};

CrsNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitCrsName(this);
	}
};

CrsNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitCrsName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.CrsNameContext = CrsNameContext;

WCPSParser.prototype.crsName = function() {

    var localctx = new CrsNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, WCPSParser.RULE_crsName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 662;
        this.match(WCPSParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AxisNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_axisName;
    return this;
}

AxisNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AxisNameContext.prototype.constructor = AxisNameContext;

AxisNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AxisNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterAxisName(this);
	}
};

AxisNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitAxisName(this);
	}
};

AxisNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitAxisName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.AxisNameContext = AxisNameContext;

WCPSParser.prototype.axisName = function() {

    var localctx = new AxisNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, WCPSParser.RULE_axisName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 664;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.STRING_LITERAL = function() {
    return this.getToken(WCPSParser.STRING_LITERAL, 0);
};

ConstantContext.prototype.TRUE = function() {
    return this.getToken(WCPSParser.TRUE, 0);
};

ConstantContext.prototype.FALSE = function() {
    return this.getToken(WCPSParser.FALSE, 0);
};

ConstantContext.prototype.REAL_NUMBER_CONSTANT = function() {
    return this.getToken(WCPSParser.REAL_NUMBER_CONSTANT, 0);
};

ConstantContext.prototype.complexNumberConstant = function() {
    return this.getTypedRuleContext(ComplexNumberConstantContext,0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitConstant(this);
	}
};

ConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.ConstantContext = ConstantContext;

WCPSParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, WCPSParser.RULE_constant);
    try {
        this.state = 671;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case WCPSParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 666;
            this.match(WCPSParser.STRING_LITERAL);
            break;
        case WCPSParser.TRUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 667;
            this.match(WCPSParser.TRUE);
            break;
        case WCPSParser.FALSE:
            this.enterOuterAlt(localctx, 3);
            this.state = 668;
            this.match(WCPSParser.FALSE);
            break;
        case WCPSParser.REAL_NUMBER_CONSTANT:
            this.enterOuterAlt(localctx, 4);
            this.state = 669;
            this.match(WCPSParser.REAL_NUMBER_CONSTANT);
            break;
        case WCPSParser.LEFT_PARANTHESIS:
            this.enterOuterAlt(localctx, 5);
            this.state = 670;
            this.complexNumberConstant();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = WCPSParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.SIMPLE_IDENTIFIER = function() {
    return this.getToken(WCPSParser.SIMPLE_IDENTIFIER, 0);
};

IdentifierContext.prototype.SIMPLE_IDENTIFIER_WITH_NUMBERS = function() {
    return this.getToken(WCPSParser.SIMPLE_IDENTIFIER_WITH_NUMBERS, 0);
};

IdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(WCPSParser.IDENTIFIER, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof WCPSListener ) {
        listener.exitIdentifier(this);
	}
};

IdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof WCPSVisitor ) {
        return visitor.visitIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




WCPSParser.IdentifierContext = IdentifierContext;

WCPSParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, WCPSParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 673;
        _la = this._input.LA(1);
        if(!(((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (WCPSParser.SIMPLE_IDENTIFIER - 90)) | (1 << (WCPSParser.SIMPLE_IDENTIFIER_WITH_NUMBERS - 90)) | (1 << (WCPSParser.IDENTIFIER - 90)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


WCPSParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 8:
			return this.booleanScalarExpression_sempred(localctx, predIndex);
	case 16:
			return this.numericalScalarExpression_sempred(localctx, predIndex);
	case 26:
			return this.coverageExpression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

WCPSParser.prototype.booleanScalarExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

WCPSParser.prototype.numericalScalarExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

WCPSParser.prototype.coverageExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 24);
		case 3:
			return this.precpred(this._ctx, 23);
		case 4:
			return this.precpred(this._ctx, 22);
		case 5:
			return this.precpred(this._ctx, 21);
		case 6:
			return this.precpred(this._ctx, 15);
		case 7:
			return this.precpred(this._ctx, 13);
		case 8:
			return this.precpred(this._ctx, 5);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.WCPSParser = WCPSParser;
